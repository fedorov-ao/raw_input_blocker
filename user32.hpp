/*
*  MIT License
*
*  Copyright (c) 2025 Alexander Fedorov
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
*/

#ifndef USER32_WRAPPER_HPP
#define USER32_WRAPPER_HPP

#include <string>
#include <memory>
#include <functional>
#include <cstdarg>

#undef _WIN32_WINNT
#define _WIN32_WINNT 0x1234
#define _USER32_
#undef STRICT

#include <windef.h>
#include <ntdef.h>
#include <ddeml.h>
#include <dimm.h>
#include <wingdi.h>

DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);

#define DPI_AWARENESS_CONTEXT_UNAWARE              ((DPI_AWARENESS_CONTEXT)-1)
#define DPI_AWARENESS_CONTEXT_SYSTEM_AWARE         ((DPI_AWARENESS_CONTEXT)-2)
#define DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE    ((DPI_AWARENESS_CONTEXT)-3)
#define DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 ((DPI_AWARENESS_CONTEXT)-4)
#define DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED    ((DPI_AWARENESS_CONTEXT)-5)

typedef enum DPI_AWARENESS
{
  DPI_AWARENESS_INVALID = -1,
  DPI_AWARENESS_UNAWARE = 0,
  DPI_AWARENESS_SYSTEM_AWARE,
  DPI_AWARENESS_PER_MONITOR_AWARE
} DPI_AWARENESS;

typedef enum
{
  DPI_HOSTING_BEHAVIOR_INVALID = -1,
  DPI_HOSTING_BEHAVIOR_DEFAULT = 0,
  DPI_HOSTING_BEHAVIOR_MIXED = 1
} DPI_HOSTING_BEHAVIOR;

struct DEVICE_NOTIFICATION_DETAILS;
struct WINDOWCOMPOSITIONATTRIBDATA;

#define DLLEXPORT __declspec(dllexport)

#undef GetWindowLongPtrA
#undef GetWindowLongPtrW
#undef SetWindowLongPtrA
#undef SetWindowLongPtrW

#undef GetClassLongPtrA
#undef GetClassLongPtrW
#undef SetClassLongPtrA
#undef SetClassLongPtrW

class IUser32
{
public:
  virtual int wvsprintfA (LPSTR, LPCSTR, va_list arglist) =0;
  virtual int wvsprintfW (LPWSTR, LPCWSTR, va_list arglist) =0;
  virtual HKL LoadKeyboardLayoutA (LPCSTR pwszKLID, UINT Flags) =0;
  virtual HKL LoadKeyboardLayoutW (LPCWSTR pwszKLID, UINT Flags) =0;
  virtual HKL ActivateKeyboardLayout (HKL hkl, UINT Flags) =0;
  virtual int ToUnicodeEx (UINT wVirtKey, UINT wScanCode, CONST BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl) =0;
  virtual WINBOOL UnloadKeyboardLayout (HKL hkl) =0;
  virtual WINBOOL GetKeyboardLayoutNameA (LPSTR pwszKLID) =0;
  virtual WINBOOL GetKeyboardLayoutNameW (LPWSTR pwszKLID) =0;
  virtual int GetKeyboardLayoutList (int nBuff, HKL * lpList) =0;
  virtual HKL GetKeyboardLayout (DWORD idThread) =0;
  virtual int GetMouseMovePointsEx (UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution) =0;
  virtual HDESK CreateDesktopA (LPCSTR lpszDesktop, LPCSTR lpszDevice, LPDEVMODEA pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa) =0;
  virtual HDESK CreateDesktopW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, LPDEVMODEW pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa) =0;
  virtual HDESK CreateDesktopExA (LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid) =0;
  virtual HDESK CreateDesktopExW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid) =0;
  virtual HDESK OpenDesktopA (LPCSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess) =0;
  virtual HDESK OpenDesktopW (LPCWSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess) =0;
  virtual HDESK OpenInputDesktop (DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess) =0;
  virtual WINBOOL EnumDesktopsA (HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam) =0;
  virtual WINBOOL EnumDesktopsW (HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam) =0;
  virtual WINBOOL EnumDesktopWindows (HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam) =0;
  virtual WINBOOL SwitchDesktop (HDESK hDesktop) =0;
  virtual WINBOOL SetThreadDesktop (HDESK hDesktop) =0;
  virtual WINBOOL CloseDesktop (HDESK hDesktop) =0;
  virtual HDESK GetThreadDesktop (DWORD dwThreadId) =0;
  virtual HWINSTA CreateWindowStationA (LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa) =0;
  virtual HWINSTA CreateWindowStationW (LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa) =0;
  virtual HWINSTA OpenWindowStationA (LPCSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess) =0;
  virtual HWINSTA OpenWindowStationW (LPCWSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess) =0;
  virtual WINBOOL EnumWindowStationsA (WINSTAENUMPROCA lpEnumFunc, LPARAM lParam) =0;
  virtual WINBOOL EnumWindowStationsW (WINSTAENUMPROCW lpEnumFunc, LPARAM lParam) =0;
  virtual WINBOOL CloseWindowStation (HWINSTA hWinSta) =0;
  virtual WINBOOL SetProcessWindowStation (HWINSTA hWinSta) =0;
  virtual HWINSTA GetProcessWindowStation (VOID) =0;
  virtual WINBOOL SetUserObjectSecurity (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID) =0;
  virtual WINBOOL GetUserObjectSecurity (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded) =0;
  virtual WINBOOL GetUserObjectInformationA (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded) =0;
  virtual WINBOOL GetUserObjectInformationW (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded) =0;
  virtual WINBOOL SetUserObjectInformationA (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength) =0;
  virtual WINBOOL SetUserObjectInformationW (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength) =0;
  virtual WINBOOL IsHungAppWindow (HWND hwnd) =0;
  virtual VOID DisableProcessWindowsGhosting (VOID) =0;
  virtual UINT RegisterWindowMessageA (LPCSTR lpString) =0;
  virtual UINT RegisterWindowMessageW (LPCWSTR lpString) =0;
  virtual WINBOOL TrackMouseEvent (LPTRACKMOUSEEVENT lpEventTrack) =0;
  virtual WINBOOL DrawEdge (HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags) =0;
  virtual WINBOOL DrawFrameControl (HDC, LPRECT, UINT, UINT) =0;
  virtual WINBOOL DrawCaption (HWND hwnd, HDC hdc, CONST RECT * lprect, UINT flags) =0;
  virtual WINBOOL DrawAnimatedRects (HWND hwnd, int idAni, CONST RECT * lprcFrom, CONST RECT * lprcTo) =0;
  virtual WINBOOL GetMessageA (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax) =0;
  virtual WINBOOL GetMessageW (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax) =0;
  virtual WINBOOL TranslateMessage (CONST MSG * lpMsg) =0;
  virtual LRESULT DispatchMessageA (CONST MSG * lpMsg) =0;
  virtual LRESULT DispatchMessageW (CONST MSG * lpMsg) =0;
  virtual WINBOOL SetMessageQueue (int cMessagesMax) =0;
  virtual WINBOOL PeekMessageA (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg) =0;
  virtual WINBOOL PeekMessageW (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg) =0;
  virtual WINBOOL RegisterHotKey (HWND hWnd, int id, UINT fsModifiers, UINT vk) =0;
  virtual WINBOOL UnregisterHotKey (HWND hWnd, int id) =0;
  virtual WINBOOL ExitWindowsEx (UINT uFlags, DWORD dwReason) =0;
  virtual WINBOOL SwapMouseButton (WINBOOL fSwap) =0;
  virtual DWORD GetMessagePos (VOID) =0;
  virtual LONG GetMessageTime (VOID) =0;
  virtual LPARAM GetMessageExtraInfo (VOID) =0;
  virtual DWORD GetUnpredictedMessagePos (VOID) =0;
  virtual WINBOOL IsWow64Message (VOID) =0;
  virtual LPARAM SetMessageExtraInfo (LPARAM lParam) =0;
  virtual LRESULT SendMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT SendMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT SendMessageTimeoutA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult) =0;
  virtual LRESULT SendMessageTimeoutW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult) =0;
  virtual WINBOOL SendNotifyMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL SendNotifyMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL SendMessageCallbackA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData) =0;
  virtual WINBOOL SendMessageCallbackW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData) =0;
  virtual LONG BroadcastSystemMessageExA (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo) =0;
  virtual LONG BroadcastSystemMessageExW (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo) =0;
  virtual LONG BroadcastSystemMessageA (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LONG BroadcastSystemMessageW (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual HPOWERNOTIFY RegisterPowerSettingNotification (HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags) =0;
  virtual WINBOOL UnregisterPowerSettingNotification (HPOWERNOTIFY Handle) =0;
  virtual HPOWERNOTIFY RegisterSuspendResumeNotification (HANDLE hRecipient, DWORD Flags) =0;
  virtual WINBOOL UnregisterSuspendResumeNotification (HPOWERNOTIFY Handle) =0;
  virtual WINBOOL PostMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL PostMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL PostThreadMessageA (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL PostThreadMessageW (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL AttachThreadInput (DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach) =0;
  virtual WINBOOL ReplyMessage (LRESULT lResult) =0;
  virtual WINBOOL WaitMessage (VOID) =0;
  virtual DWORD WaitForInputIdle (HANDLE hProcess, DWORD dwMilliseconds) =0;
  virtual LRESULT DefWindowProcA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT DefWindowProcW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual VOID PostQuitMessage (int nExitCode) =0;
  virtual WINBOOL InSendMessage (VOID) =0;
  virtual DWORD InSendMessageEx (LPVOID lpReserved) =0;
  virtual UINT GetDoubleClickTime (VOID) =0;
  virtual WINBOOL SetDoubleClickTime (UINT) =0;
  virtual ATOM RegisterClassA (CONST WNDCLASSA * lpWndClass) =0;
  virtual ATOM RegisterClassW (CONST WNDCLASSW * lpWndClass) =0;
  virtual WINBOOL UnregisterClassA (LPCSTR lpClassName, HINSTANCE hInstance) =0;
  virtual WINBOOL UnregisterClassW (LPCWSTR lpClassName, HINSTANCE hInstance) =0;
  virtual WINBOOL GetClassInfoA (HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass) =0;
  virtual WINBOOL GetClassInfoW (HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass) =0;
  virtual ATOM RegisterClassExA (CONST WNDCLASSEXA *) =0;
  virtual ATOM RegisterClassExW (CONST WNDCLASSEXW *) =0;
  virtual WINBOOL GetClassInfoExA (HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx) =0;
  virtual WINBOOL GetClassInfoExW (HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx) =0;
#ifdef STRICT
  virtual LRESULT CallWindowProcA (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT CallWindowProcW (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
#else
  virtual LRESULT CallWindowProcA (FARPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT CallWindowProcW (FARPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
#endif
  virtual HDEVNOTIFY RegisterDeviceNotificationA (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags) =0;
  virtual HDEVNOTIFY RegisterDeviceNotificationW (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags) =0;
  virtual WINBOOL UnregisterDeviceNotification (HDEVNOTIFY Handle) =0;
  virtual HWND CreateWindowExA (DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam) =0;
  virtual HWND CreateWindowExW (DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam) =0;
  virtual WINBOOL IsWindow (HWND hWnd) =0;
  virtual WINBOOL IsMenu (HMENU hMenu) =0;
  virtual WINBOOL IsChild (HWND hWndParent, HWND hWnd) =0;
  virtual WINBOOL DestroyWindow (HWND hWnd) =0;
  virtual WINBOOL ShowWindow (HWND hWnd, int nCmdShow) =0;
  virtual WINBOOL AnimateWindow (HWND hWnd, DWORD dwTime, DWORD dwFlags) =0;
  virtual WINBOOL UpdateLayeredWindow (HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags) =0;
  virtual WINBOOL UpdateLayeredWindowIndirect (HWND hWnd, const UPDATELAYEREDWINDOWINFO * pULWInfo) =0;
  virtual WINBOOL GetLayeredWindowAttributes (HWND hwnd, COLORREF * pcrKey, BYTE * pbAlpha, DWORD * pdwFlags) =0;
  virtual WINBOOL PrintWindow (HWND hwnd, HDC hdcBlt, UINT nFlags) =0;
  virtual WINBOOL SetLayeredWindowAttributes (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags) =0;
  virtual WINBOOL ShowWindowAsync (HWND hWnd, int nCmdShow) =0;
  virtual WINBOOL FlashWindow (HWND hWnd, WINBOOL bInvert) =0;
  virtual WINBOOL FlashWindowEx (PFLASHWINFO pfwi) =0;
  virtual WINBOOL ShowOwnedPopups (HWND hWnd, WINBOOL fShow) =0;
  virtual WINBOOL OpenIcon (HWND hWnd) =0;
  virtual WINBOOL CloseWindow (HWND hWnd) =0;
  virtual WINBOOL MoveWindow (HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint) =0;
  virtual WINBOOL SetWindowPos (HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags) =0;
  virtual WINBOOL GetWindowPlacement (HWND hWnd, WINDOWPLACEMENT * lpwndpl) =0;
  virtual WINBOOL SetWindowPlacement (HWND hWnd, CONST WINDOWPLACEMENT * lpwndpl) =0;
  virtual WINBOOL GetWindowDisplayAffinity (HWND hWnd, DWORD * pdwAffinity) =0;
  virtual WINBOOL SetWindowDisplayAffinity (HWND hWnd, DWORD dwAffinity) =0;
  virtual HDWP BeginDeferWindowPos (int nNumWindows) =0;
  virtual HDWP DeferWindowPos (HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags) =0;
  virtual WINBOOL EndDeferWindowPos (HDWP hWinPosInfo) =0;
  virtual WINBOOL IsWindowVisible (HWND hWnd) =0;
  virtual WINBOOL IsIconic (HWND hWnd) =0;
  virtual WINBOOL AnyPopup (VOID) =0;
  virtual WINBOOL BringWindowToTop (HWND hWnd) =0;
  virtual WINBOOL IsZoomed (HWND hWnd) =0;
  virtual HWND CreateDialogParamA (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual HWND CreateDialogParamW (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual HWND CreateDialogIndirectParamA (HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual HWND CreateDialogIndirectParamW (HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual INT_PTR DialogBoxParamA (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual INT_PTR DialogBoxParamW (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual INT_PTR DialogBoxIndirectParamA (HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual INT_PTR DialogBoxIndirectParamW (HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam) =0;
  virtual WINBOOL EndDialog (HWND hDlg, INT_PTR nResult) =0;
  virtual HWND GetDlgItem (HWND hDlg, int nIDDlgItem) =0;
  virtual WINBOOL SetDlgItemInt (HWND hDlg, int nIDDlgItem, UINT uValue, WINBOOL bSigned) =0;
  virtual UINT GetDlgItemInt (HWND hDlg, int nIDDlgItem, WINBOOL * lpTranslated, WINBOOL bSigned) =0;
  virtual WINBOOL SetDlgItemTextA (HWND hDlg, int nIDDlgItem, LPCSTR lpString) =0;
  virtual WINBOOL SetDlgItemTextW (HWND hDlg, int nIDDlgItem, LPCWSTR lpString) =0;
  virtual UINT GetDlgItemTextA (HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax) =0;
  virtual UINT GetDlgItemTextW (HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax) =0;
  virtual WINBOOL CheckDlgButton (HWND hDlg, int nIDButton, UINT uCheck) =0;
  virtual WINBOOL CheckRadioButton (HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton) =0;
  virtual UINT IsDlgButtonChecked (HWND hDlg, int nIDButton) =0;
  virtual LRESULT SendDlgItemMessageA (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT SendDlgItemMessageW (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual HWND GetNextDlgGroupItem (HWND hDlg, HWND hCtl, WINBOOL bPrevious) =0;
  virtual HWND GetNextDlgTabItem (HWND hDlg, HWND hCtl, WINBOOL bPrevious) =0;
  virtual int GetDlgCtrlID (HWND hWnd) =0;
  virtual LONG GetDialogBaseUnits (VOID) =0;
  virtual LRESULT DefDlgProcA (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT DefDlgProcW (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL CallMsgFilterA (LPMSG lpMsg, int nCode) =0;
  virtual WINBOOL CallMsgFilterW (LPMSG lpMsg, int nCode) =0;
  virtual WINBOOL OpenClipboard (HWND hWndNewOwner) =0;
  virtual WINBOOL CloseClipboard (VOID) =0;
  virtual DWORD GetClipboardSequenceNumber (VOID) =0;
  virtual HWND GetClipboardOwner (VOID) =0;
  virtual HWND SetClipboardViewer (HWND hWndNewViewer) =0;
  virtual HWND GetClipboardViewer (VOID) =0;
  virtual WINBOOL ChangeClipboardChain (HWND hWndRemove, HWND hWndNewNext) =0;
  virtual HANDLE SetClipboardData (UINT uFormat, HANDLE hMem) =0;
  virtual HANDLE GetClipboardData (UINT uFormat) =0;
  virtual UINT RegisterClipboardFormatA (LPCSTR lpszFormat) =0;
  virtual UINT RegisterClipboardFormatW (LPCWSTR lpszFormat) =0;
  virtual int CountClipboardFormats (VOID) =0;
  virtual UINT EnumClipboardFormats (UINT format) =0;
  virtual int GetClipboardFormatNameA (UINT format, LPSTR lpszFormatName, int cchMaxCount) =0;
  virtual int GetClipboardFormatNameW (UINT format, LPWSTR lpszFormatName, int cchMaxCount) =0;
  virtual WINBOOL EmptyClipboard (VOID) =0;
  virtual WINBOOL IsClipboardFormatAvailable (UINT format) =0;
  virtual int GetPriorityClipboardFormat (UINT * paFormatPriorityList, int cFormats) =0;
  virtual HWND GetOpenClipboardWindow (VOID) =0;
  virtual WINBOOL AddClipboardFormatListener (HWND hwnd) =0;
  virtual WINBOOL RemoveClipboardFormatListener (HWND hwnd) =0;
  virtual WINBOOL GetUpdatedClipboardFormats (PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut) =0;
  virtual WINBOOL CharToOemA (LPCSTR lpszSrc, LPSTR lpszDst) =0;
  virtual WINBOOL CharToOemW (LPCWSTR lpszSrc, LPSTR lpszDst) =0;
  virtual WINBOOL OemToCharA (LPCSTR lpszSrc, LPSTR lpszDst) =0;
  virtual WINBOOL OemToCharW (LPCSTR lpszSrc, LPWSTR lpszDst) =0;
  virtual WINBOOL CharToOemBuffA (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength) =0;
  virtual WINBOOL CharToOemBuffW (LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength) =0;
  virtual WINBOOL OemToCharBuffA (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength) =0;
  virtual WINBOOL OemToCharBuffW (LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength) =0;
  virtual LPSTR CharUpperA (LPSTR lpsz) =0;
  virtual LPWSTR CharUpperW (LPWSTR lpsz) =0;
  virtual DWORD CharUpperBuffA (LPSTR lpsz, DWORD cchLength) =0;
  virtual DWORD CharUpperBuffW (LPWSTR lpsz, DWORD cchLength) =0;
  virtual LPSTR CharLowerA (LPSTR lpsz) =0;
  virtual LPWSTR CharLowerW (LPWSTR lpsz) =0;
  virtual DWORD CharLowerBuffA (LPSTR lpsz, DWORD cchLength) =0;
  virtual DWORD CharLowerBuffW (LPWSTR lpsz, DWORD cchLength) =0;
  virtual LPSTR CharNextA (LPCSTR lpsz) =0;
  virtual LPWSTR CharNextW (LPCWSTR lpsz) =0;
  virtual LPSTR CharPrevA (LPCSTR lpszStart, LPCSTR lpszCurrent) =0;
  virtual LPWSTR CharPrevW (LPCWSTR lpszStart, LPCWSTR lpszCurrent) =0;
  virtual LPSTR CharNextExA (WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags) =0;
  virtual LPSTR CharPrevExA (WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags) =0;
  virtual WINBOOL IsCharAlphaA (CHAR ch) =0;
  virtual WINBOOL IsCharAlphaW (WCHAR ch) =0;
  virtual WINBOOL IsCharAlphaNumericA (CHAR ch) =0;
  virtual WINBOOL IsCharAlphaNumericW (WCHAR ch) =0;
  virtual WINBOOL IsCharUpperA (CHAR ch) =0;
  virtual WINBOOL IsCharUpperW (WCHAR ch) =0;
  virtual WINBOOL IsCharLowerA (CHAR ch) =0;
  virtual WINBOOL IsCharLowerW (WCHAR ch) =0;
  virtual HWND SetFocus (HWND hWnd) =0;
  virtual HWND GetActiveWindow (VOID) =0;
  virtual HWND GetFocus (VOID) =0;
  virtual UINT GetKBCodePage (VOID) =0;
  virtual SHORT GetKeyState (int nVirtKey) =0;
  virtual SHORT GetAsyncKeyState (int vKey) =0;
  virtual WINBOOL GetKeyboardState (PBYTE lpKeyState) =0;
  virtual WINBOOL SetKeyboardState (LPBYTE lpKeyState) =0;
  virtual int GetKeyNameTextA (LONG lParam, LPSTR lpString, int cchSize) =0;
  virtual int GetKeyNameTextW (LONG lParam, LPWSTR lpString, int cchSize) =0;
  virtual int GetKeyboardType (int nTypeFlag) =0;
  virtual int ToAscii (UINT uVirtKey, UINT uScanCode, CONST BYTE * lpKeyState, LPWORD lpChar, UINT uFlags) =0;
  virtual int ToAsciiEx (UINT uVirtKey, UINT uScanCode, CONST BYTE * lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl) =0;
  virtual int ToUnicode (UINT wVirtKey, UINT wScanCode, CONST BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags) =0;
  virtual DWORD OemKeyScan (WORD wOemChar) =0;
  virtual SHORT VkKeyScanA (CHAR ch) =0;
  virtual SHORT VkKeyScanW (WCHAR ch) =0;
  virtual SHORT VkKeyScanExA (CHAR ch, HKL dwhkl) =0;
  virtual SHORT VkKeyScanExW (WCHAR ch, HKL dwhkl) =0;
  virtual VOID keybd_event (BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo) =0;
  virtual VOID mouse_event (DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo) =0;
  virtual UINT SendInput (UINT cInputs, LPINPUT pInputs, int cbSize) =0;
  virtual WINBOOL GetTouchInputInfo (HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize) =0;
  virtual WINBOOL CloseTouchInputHandle (HTOUCHINPUT hTouchInput) =0;
  virtual WINBOOL RegisterTouchWindow (HWND hwnd, ULONG ulFlags) =0;
  virtual WINBOOL UnregisterTouchWindow (HWND hwnd) =0;
  virtual WINBOOL IsTouchWindow (HWND hwnd, PULONG pulFlags) =0;
  virtual WINBOOL InitializeTouchInjection (UINT32 maxCount, DWORD dwMode) =0;
  virtual WINBOOL InjectTouchInput (UINT32 count, CONST POINTER_TOUCH_INFO * contacts) =0;
  virtual WINBOOL GetPointerType (UINT32 pointerId, POINTER_INPUT_TYPE * pointerType) =0;
  virtual WINBOOL GetPointerCursorId (UINT32 pointerId, UINT32 * cursorId) =0;
  virtual WINBOOL GetPointerInfo (UINT32 pointerId, POINTER_INFO * pointerInfo) =0;
  virtual WINBOOL GetPointerInfoHistory (UINT32 pointerId, UINT32 * entriesCount, POINTER_INFO * pointerInfo) =0;
  virtual WINBOOL GetPointerFrameInfo (UINT32 pointerId, UINT32 * pointerCount, POINTER_INFO * pointerInfo) =0;
  virtual WINBOOL GetPointerFrameInfoHistory (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_INFO * pointerInfo) =0;
  virtual WINBOOL GetPointerTouchInfo (UINT32 pointerId, POINTER_TOUCH_INFO * touchInfo) =0;
  virtual WINBOOL GetPointerTouchInfoHistory (UINT32 pointerId, UINT32 * entriesCount, POINTER_TOUCH_INFO * touchInfo) =0;
  virtual WINBOOL GetPointerFrameTouchInfo (UINT32 pointerId, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo) =0;
  virtual WINBOOL GetPointerFrameTouchInfoHistory (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo) =0;
  virtual WINBOOL GetPointerPenInfo (UINT32 pointerId, POINTER_PEN_INFO * penInfo) =0;
  virtual WINBOOL GetPointerPenInfoHistory (UINT32 pointerId, UINT32 * entriesCount, POINTER_PEN_INFO * penInfo) =0;
  virtual WINBOOL GetPointerFramePenInfo (UINT32 pointerId, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo) =0;
  virtual WINBOOL GetPointerFramePenInfoHistory (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo) =0;
  virtual WINBOOL SkipPointerFrameMessages (UINT32 pointerId) =0;
  virtual WINBOOL RegisterPointerInputTarget (HWND hwnd, POINTER_INPUT_TYPE pointerType) =0;
  virtual WINBOOL UnregisterPointerInputTarget (HWND hwnd, POINTER_INPUT_TYPE pointerType) =0;
  virtual WINBOOL EnableMouseInPointer (WINBOOL fEnable) =0;
  virtual WINBOOL IsMouseInPointerEnabled (VOID) =0;
  virtual WINBOOL RegisterTouchHitTestingWindow (HWND hwnd, ULONG value) =0;
  virtual WINBOOL EvaluateProximityToRect (const RECT * controlBoundingBox, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval) =0;
  virtual WINBOOL EvaluateProximityToPolygon (UINT32 numVertices, const POINT * controlPolygon, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval) =0;
  virtual LRESULT PackTouchHitTestingProximityEvaluation (const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval) =0;
  virtual WINBOOL GetWindowFeedbackSetting (HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 * pSize, VOID * config) =0;
  virtual WINBOOL SetWindowFeedbackSetting (HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 size, CONST VOID * configuration) =0;
  virtual WINBOOL GetLastInputInfo (PLASTINPUTINFO plii) =0;
  virtual UINT MapVirtualKeyA (UINT uCode, UINT uMapType) =0;
  virtual UINT MapVirtualKeyW (UINT uCode, UINT uMapType) =0;
  virtual UINT MapVirtualKeyExA (UINT uCode, UINT uMapType, HKL dwhkl) =0;
  virtual UINT MapVirtualKeyExW (UINT uCode, UINT uMapType, HKL dwhkl) =0;
  virtual WINBOOL GetInputState (VOID) =0;
  virtual DWORD GetQueueStatus (UINT flags) =0;
  virtual HWND GetCapture (VOID) =0;
  virtual HWND SetCapture (HWND hWnd) =0;
  virtual WINBOOL ReleaseCapture (VOID) =0;
  virtual DWORD MsgWaitForMultipleObjects (DWORD nCount, CONST HANDLE * pHandles, WINBOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask) =0;
  virtual DWORD MsgWaitForMultipleObjectsEx (DWORD nCount, CONST HANDLE * pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags) =0;
  virtual UINT_PTR SetTimer (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc) =0;
  virtual WINBOOL KillTimer (HWND hWnd, UINT_PTR uIDEvent) =0;
  virtual WINBOOL IsWindowUnicode (HWND hWnd) =0;
  virtual WINBOOL EnableWindow (HWND hWnd, WINBOOL bEnable) =0;
  virtual WINBOOL IsWindowEnabled (HWND hWnd) =0;
  virtual HACCEL LoadAcceleratorsA (HINSTANCE hInstance, LPCSTR lpTableName) =0;
  virtual HACCEL LoadAcceleratorsW (HINSTANCE hInstance, LPCWSTR lpTableName) =0;
  virtual HACCEL CreateAcceleratorTableA (LPACCEL paccel, int cAccel) =0;
  virtual HACCEL CreateAcceleratorTableW (LPACCEL paccel, int cAccel) =0;
  virtual WINBOOL DestroyAcceleratorTable (HACCEL hAccel) =0;
  virtual int CopyAcceleratorTableA (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries) =0;
  virtual int CopyAcceleratorTableW (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries) =0;
  virtual int TranslateAcceleratorA (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg) =0;
  virtual int TranslateAcceleratorW (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg) =0;
  virtual UINT_PTR SetCoalescableTimer (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc, ULONG uToleranceDelay) =0;
  virtual int GetSystemMetrics (int nIndex) =0;
  virtual HMENU LoadMenuA (HINSTANCE hInstance, LPCSTR lpMenuName) =0;
  virtual HMENU LoadMenuW (HINSTANCE hInstance, LPCWSTR lpMenuName) =0;
  virtual HMENU LoadMenuIndirectA (CONST MENUTEMPLATEA * lpMenuTemplate) =0;
  virtual HMENU LoadMenuIndirectW (CONST MENUTEMPLATEW * lpMenuTemplate) =0;
  virtual HMENU GetMenu (HWND hWnd) =0;
  virtual WINBOOL SetMenu (HWND hWnd, HMENU hMenu) =0;
  virtual WINBOOL ChangeMenuA (HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags) =0;
  virtual WINBOOL ChangeMenuW (HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags) =0;
  virtual WINBOOL HiliteMenuItem (HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite) =0;
  virtual int GetMenuStringA (HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags) =0;
  virtual int GetMenuStringW (HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags) =0;
  virtual UINT GetMenuState (HMENU hMenu, UINT uId, UINT uFlags) =0;
  virtual WINBOOL DrawMenuBar (HWND hWnd) =0;
  virtual HMENU GetSystemMenu (HWND hWnd, WINBOOL bRevert) =0;
  virtual HMENU CreateMenu (VOID) =0;
  virtual HMENU CreatePopupMenu (VOID) =0;
  virtual WINBOOL DestroyMenu (HMENU hMenu) =0;
  virtual DWORD CheckMenuItem (HMENU hMenu, UINT uIDCheckItem, UINT uCheck) =0;
  virtual WINBOOL EnableMenuItem (HMENU hMenu, UINT uIDEnableItem, UINT uEnable) =0;
  virtual HMENU GetSubMenu (HMENU hMenu, int nPos) =0;
  virtual UINT GetMenuItemID (HMENU hMenu, int nPos) =0;
  virtual int GetMenuItemCount (HMENU hMenu) =0;
  virtual WINBOOL InsertMenuA (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem) =0;
  virtual WINBOOL InsertMenuW (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem) =0;
  virtual WINBOOL AppendMenuA (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem) =0;
  virtual WINBOOL AppendMenuW (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem) =0;
  virtual WINBOOL ModifyMenuA (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem) =0;
  virtual WINBOOL ModifyMenuW (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem) =0;
  virtual WINBOOL RemoveMenu (HMENU hMenu, UINT uPosition, UINT uFlags) =0;
  virtual WINBOOL DeleteMenu (HMENU hMenu, UINT uPosition, UINT uFlags) =0;
  virtual WINBOOL SetMenuItemBitmaps (HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked) =0;
  virtual LONG GetMenuCheckMarkDimensions (VOID) =0;
  virtual WINBOOL TrackPopupMenu (HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, CONST RECT * prcRect) =0;
  virtual WINBOOL TrackPopupMenuEx (HMENU, UINT, int, int, HWND, LPTPMPARAMS) =0;
  virtual WINBOOL GetMenuInfo (HMENU, LPMENUINFO) =0;
  virtual WINBOOL SetMenuInfo (HMENU, LPCMENUINFO) =0;
  virtual WINBOOL EndMenu (VOID) =0;
  virtual WINBOOL CalculatePopupWindowPosition (const POINT * anchorPoint, const SIZE * windowSize, UINT flags, RECT * excludeRect, RECT * popupWindowPosition) =0;
  virtual WINBOOL InsertMenuItemA (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOA lpmi) =0;
  virtual WINBOOL InsertMenuItemW (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOW lpmi) =0;
  virtual WINBOOL GetMenuItemInfoA (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOA lpmii) =0;
  virtual WINBOOL GetMenuItemInfoW (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOW lpmii) =0;
  virtual WINBOOL SetMenuItemInfoA (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOA lpmii) =0;
  virtual WINBOOL SetMenuItemInfoW (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOW lpmii) =0;
  virtual UINT GetMenuDefaultItem (HMENU hMenu, UINT fByPos, UINT gmdiFlags) =0;
  virtual WINBOOL SetMenuDefaultItem (HMENU hMenu, UINT uItem, UINT fByPos) =0;
  virtual WINBOOL GetMenuItemRect (HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem) =0;
  virtual int MenuItemFromPoint (HWND hWnd, HMENU hMenu, POINT ptScreen) =0;
  virtual DWORD DragObject (HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur) =0;
  virtual WINBOOL DragDetect (HWND hwnd, POINT pt) =0;
  virtual WINBOOL DrawIcon (HDC hDC, int X, int Y, HICON hIcon) =0;
  virtual int DrawTextA (HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format) =0;
  virtual int DrawTextW (HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format) =0;
  virtual int DrawTextExA (HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp) =0;
  virtual int DrawTextExW (HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp) =0;
  virtual WINBOOL GrayStringA (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight) =0;
  virtual WINBOOL GrayStringW (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight) =0;
  virtual WINBOOL DrawStateA (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags) =0;
  virtual WINBOOL DrawStateW (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags) =0;
  virtual LONG TabbedTextOutA (HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions, int nTabOrigin) =0;
  virtual LONG TabbedTextOutW (HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions, int nTabOrigin) =0;
  virtual DWORD GetTabbedTextExtentA (HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions) =0;
  virtual DWORD GetTabbedTextExtentW (HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions) =0;
  virtual WINBOOL UpdateWindow (HWND hWnd) =0;
  virtual HWND SetActiveWindow (HWND hWnd) =0;
  virtual HWND GetForegroundWindow (VOID) =0;
  virtual WINBOOL PaintDesktop (HDC hdc) =0;
  virtual VOID SwitchToThisWindow (HWND hwnd, WINBOOL fUnknown) =0;
  virtual WINBOOL SetForegroundWindow (HWND hWnd) =0;
  virtual WINBOOL AllowSetForegroundWindow (DWORD dwProcessId) =0;
  virtual WINBOOL LockSetForegroundWindow (UINT uLockCode) =0;
  virtual HWND WindowFromDC (HDC hDC) =0;
  virtual HDC GetDC (HWND hWnd) =0;
  virtual HDC GetDCEx (HWND hWnd, HRGN hrgnClip, DWORD flags) =0;
  virtual HDC GetWindowDC (HWND hWnd) =0;
  virtual int ReleaseDC (HWND hWnd, HDC hDC) =0;
  virtual HDC BeginPaint (HWND hWnd, LPPAINTSTRUCT lpPaint) =0;
  virtual WINBOOL EndPaint (HWND hWnd, CONST PAINTSTRUCT * lpPaint) =0;
  virtual WINBOOL GetUpdateRect (HWND hWnd, LPRECT lpRect, WINBOOL bErase) =0;
  virtual int GetUpdateRgn (HWND hWnd, HRGN hRgn, WINBOOL bErase) =0;
  virtual int SetWindowRgn (HWND hWnd, HRGN hRgn, WINBOOL bRedraw) =0;
  virtual int GetWindowRgn (HWND hWnd, HRGN hRgn) =0;
  virtual int GetWindowRgnBox (HWND hWnd, LPRECT lprc) =0;
  virtual int ExcludeUpdateRgn (HDC hDC, HWND hWnd) =0;
  virtual WINBOOL InvalidateRect (HWND hWnd, CONST RECT * lpRect, WINBOOL bErase) =0;
  virtual WINBOOL ValidateRect (HWND hWnd, CONST RECT * lpRect) =0;
  virtual WINBOOL InvalidateRgn (HWND hWnd, HRGN hRgn, WINBOOL bErase) =0;
  virtual WINBOOL ValidateRgn (HWND hWnd, HRGN hRgn) =0;
  virtual WINBOOL RedrawWindow (HWND hWnd, CONST RECT * lprcUpdate, HRGN hrgnUpdate, UINT flags) =0;
  virtual WINBOOL LockWindowUpdate (HWND hWndLock) =0;
  virtual WINBOOL ScrollWindow (HWND hWnd, int XAmount, int YAmount, CONST RECT * lpRect, CONST RECT * lpClipRect) =0;
  virtual WINBOOL ScrollDC (HDC hDC, int dx, int dy, CONST RECT * lprcScroll, CONST RECT * lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate) =0;
  virtual int ScrollWindowEx (HWND hWnd, int dx, int dy, CONST RECT * prcScroll, CONST RECT * prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags) =0;
  virtual int SetScrollPos (HWND hWnd, int nBar, int nPos, WINBOOL bRedraw) =0;
  virtual int GetScrollPos (HWND hWnd, int nBar) =0;
  virtual WINBOOL SetScrollRange (HWND hWnd, int nBar, int nMinPos, int nMaxPos, WINBOOL bRedraw) =0;
  virtual WINBOOL GetScrollRange (HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos) =0;
  virtual WINBOOL ShowScrollBar (HWND hWnd, int wBar, WINBOOL bShow) =0;
  virtual WINBOOL EnableScrollBar (HWND hWnd, UINT wSBflags, UINT wArrows) =0;
  virtual WINBOOL SetPropA (HWND hWnd, LPCSTR lpString, HANDLE hData) =0;
  virtual WINBOOL SetPropW (HWND hWnd, LPCWSTR lpString, HANDLE hData) =0;
  virtual HANDLE GetPropA (HWND hWnd, LPCSTR lpString) =0;
  virtual HANDLE GetPropW (HWND hWnd, LPCWSTR lpString) =0;
  virtual HANDLE RemovePropA (HWND hWnd, LPCSTR lpString) =0;
  virtual HANDLE RemovePropW (HWND hWnd, LPCWSTR lpString) =0;
  virtual int EnumPropsExA (HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam) =0;
  virtual int EnumPropsExW (HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam) =0;
  virtual int EnumPropsA (HWND hWnd, PROPENUMPROCA lpEnumFunc) =0;
  virtual int EnumPropsW (HWND hWnd, PROPENUMPROCW lpEnumFunc) =0;
  virtual WINBOOL SetWindowTextA (HWND hWnd, LPCSTR lpString) =0;
  virtual WINBOOL SetWindowTextW (HWND hWnd, LPCWSTR lpString) =0;
  virtual int GetWindowTextA (HWND hWnd, LPSTR lpString, int nMaxCount) =0;
  virtual int GetWindowTextW (HWND hWnd, LPWSTR lpString, int nMaxCount) =0;
  virtual int GetWindowTextLengthA (HWND hWnd) =0;
  virtual int GetWindowTextLengthW (HWND hWnd) =0;
  virtual WINBOOL GetClientRect (HWND hWnd, LPRECT lpRect) =0;
  virtual WINBOOL GetWindowRect (HWND hWnd, LPRECT lpRect) =0;
  virtual WINBOOL AdjustWindowRect (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu) =0;
  virtual WINBOOL AdjustWindowRectEx (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu, DWORD dwExStyle) =0;
  virtual WINBOOL SetWindowContextHelpId (HWND, DWORD) =0;
  virtual DWORD GetWindowContextHelpId (HWND) =0;
  virtual WINBOOL SetMenuContextHelpId (HMENU, DWORD) =0;
  virtual DWORD GetMenuContextHelpId (HMENU) =0;
  virtual int MessageBoxA (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) =0;
  virtual int MessageBoxW (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType) =0;
  virtual int MessageBoxExA (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId) =0;
  virtual int MessageBoxExW (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId) =0;
  virtual int MessageBoxIndirectA (CONST MSGBOXPARAMSA * lpmbp) =0;
  virtual int MessageBoxIndirectW (CONST MSGBOXPARAMSW * lpmbp) =0;
  virtual WINBOOL MessageBeep (UINT uType) =0;
  virtual int ShowCursor (WINBOOL bShow) =0;
  virtual WINBOOL SetCursorPos (int X, int Y) =0;
  virtual HCURSOR SetCursor (HCURSOR hCursor) =0;
  virtual WINBOOL GetCursorPos (LPPOINT lpPoint) =0;
  virtual WINBOOL ClipCursor (CONST RECT * lpRect) =0;
  virtual WINBOOL GetClipCursor (LPRECT lpRect) =0;
  virtual HCURSOR GetCursor (VOID) =0;
  virtual WINBOOL CreateCaret (HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight) =0;
  virtual UINT GetCaretBlinkTime (VOID) =0;
  virtual WINBOOL SetCaretBlinkTime (UINT uMSeconds) =0;
  virtual WINBOOL DestroyCaret (VOID) =0;
  virtual WINBOOL HideCaret (HWND hWnd) =0;
  virtual WINBOOL ShowCaret (HWND hWnd) =0;
  virtual WINBOOL SetCaretPos (int X, int Y) =0;
  virtual WINBOOL GetCaretPos (LPPOINT lpPoint) =0;
  virtual WINBOOL ClientToScreen (HWND hWnd, LPPOINT lpPoint) =0;
  virtual WINBOOL ScreenToClient (HWND hWnd, LPPOINT lpPoint) =0;
  virtual int MapWindowPoints (HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints) =0;
  virtual HWND WindowFromPoint (POINT Point) =0;
  virtual HWND ChildWindowFromPoint (HWND hWndParent, POINT Point) =0;
  virtual HWND ChildWindowFromPointEx (HWND hwnd, POINT pt, UINT flags) =0;
  virtual WINBOOL SetPhysicalCursorPos (int X, int Y) =0;
  virtual WINBOOL GetPhysicalCursorPos (LPPOINT lpPoint) =0;
  virtual WINBOOL LogicalToPhysicalPoint (HWND hWnd, LPPOINT lpPoint) =0;
  virtual WINBOOL PhysicalToLogicalPoint (HWND hWnd, LPPOINT lpPoint) =0;
  virtual HWND WindowFromPhysicalPoint (POINT Point) =0;
  virtual DWORD GetSysColor (int nIndex) =0;
  virtual HBRUSH GetSysColorBrush (int nIndex) =0;
  virtual WINBOOL SetSysColors (int cElements, CONST INT * lpaElements, CONST COLORREF * lpaRgbValues) =0;
  virtual WINBOOL DrawFocusRect (HDC hDC, CONST RECT * lprc) =0;
  virtual int FillRect (HDC hDC, CONST RECT * lprc, HBRUSH hbr) =0;
  virtual int FrameRect (HDC hDC, CONST RECT * lprc, HBRUSH hbr) =0;
  virtual WINBOOL InvertRect (HDC hDC, CONST RECT * lprc) =0;
  virtual WINBOOL SetRect (LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom) =0;
  virtual WINBOOL SetRectEmpty (LPRECT lprc) =0;
  virtual WINBOOL CopyRect (LPRECT lprcDst, CONST RECT * lprcSrc) =0;
  virtual WINBOOL InflateRect (LPRECT lprc, int dx, int dy) =0;
  virtual WINBOOL IntersectRect (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2) =0;
  virtual WINBOOL UnionRect (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2) =0;
  virtual WINBOOL SubtractRect (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2) =0;
  virtual WINBOOL OffsetRect (LPRECT lprc, int dx, int dy) =0;
  virtual WINBOOL IsRectEmpty (CONST RECT * lprc) =0;
  virtual WINBOOL EqualRect (CONST RECT * lprc1, CONST RECT * lprc2) =0;
  virtual WINBOOL PtInRect (CONST RECT * lprc, POINT pt) =0;
  virtual WORD GetWindowWord (HWND hWnd, int nIndex) =0;
  virtual WORD SetWindowWord (HWND hWnd, int nIndex, WORD wNewWord) =0;
  virtual LONG GetWindowLongA (HWND hWnd, int nIndex) =0;
  virtual LONG GetWindowLongW (HWND hWnd, int nIndex) =0;
  virtual LONG SetWindowLongA (HWND hWnd, int nIndex, LONG dwNewLong) =0;
  virtual LONG SetWindowLongW (HWND hWnd, int nIndex, LONG dwNewLong) =0;
  virtual LONG_PTR GetWindowLongPtrA (HWND hWnd, int nIndex) =0;
  virtual LONG_PTR GetWindowLongPtrW (HWND hWnd, int nIndex) =0;
  virtual LONG_PTR SetWindowLongPtrA (HWND hWnd, int nIndex, LONG_PTR dwNewLong) =0;
  virtual LONG_PTR SetWindowLongPtrW (HWND hWnd, int nIndex, LONG_PTR dwNewLong) =0;
  virtual WORD GetClassWord (HWND hWnd, int nIndex) =0;
  virtual WORD SetClassWord (HWND hWnd, int nIndex, WORD wNewWord) =0;
  virtual DWORD GetClassLongA (HWND hWnd, int nIndex) =0;
  virtual DWORD GetClassLongW (HWND hWnd, int nIndex) =0;
  virtual DWORD SetClassLongA (HWND hWnd, int nIndex, LONG dwNewLong) =0;
  virtual DWORD SetClassLongW (HWND hWnd, int nIndex, LONG dwNewLong) =0;
  virtual ULONG_PTR GetClassLongPtrA (HWND hWnd, int nIndex) =0;
  virtual ULONG_PTR GetClassLongPtrW (HWND hWnd, int nIndex) =0;
  virtual ULONG_PTR SetClassLongPtrA (HWND hWnd, int nIndex, LONG_PTR dwNewLong) =0;
  virtual ULONG_PTR SetClassLongPtrW (HWND hWnd, int nIndex, LONG_PTR dwNewLong) =0;
  virtual WINBOOL GetProcessDefaultLayout (DWORD * pdwDefaultLayout) =0;
  virtual WINBOOL SetProcessDefaultLayout (DWORD dwDefaultLayout) =0;
  virtual HWND GetDesktopWindow (VOID) =0;
  virtual HWND GetParent (HWND hWnd) =0;
  virtual HWND SetParent (HWND hWndChild, HWND hWndNewParent) =0;
  virtual WINBOOL EnumChildWindows (HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam) =0;
  virtual HWND FindWindowA (LPCSTR lpClassName, LPCSTR lpWindowName) =0;
  virtual HWND FindWindowW (LPCWSTR lpClassName, LPCWSTR lpWindowName) =0;
  virtual HWND FindWindowExA (HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow) =0;
  virtual HWND FindWindowExW (HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow) =0;
  virtual HWND GetShellWindow (VOID) =0;
  virtual WINBOOL RegisterShellHookWindow (HWND hwnd) =0;
  virtual WINBOOL DeregisterShellHookWindow (HWND hwnd) =0;
  virtual WINBOOL EnumWindows (WNDENUMPROC lpEnumFunc, LPARAM lParam) =0;
  virtual WINBOOL EnumThreadWindows (DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam) =0;
  virtual int GetClassNameA (HWND hWnd, LPSTR lpClassName, int nMaxCount) =0;
  virtual int GetClassNameW (HWND hWnd, LPWSTR lpClassName, int nMaxCount) =0;
  virtual HWND GetTopWindow (HWND hWnd) =0;
  virtual DWORD GetWindowThreadProcessId (HWND hWnd, LPDWORD lpdwProcessId) =0;
  virtual WINBOOL IsGUIThread (WINBOOL bConvert) =0;
  virtual HWND GetLastActivePopup (HWND hWnd) =0;
  virtual HWND GetWindow (HWND hWnd, UINT uCmd) =0;
#ifdef STRICT
  virtual HHOOK SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc) =0;
  virtual HHOOK SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc) =0;
#else
  virtual HOOKPROC SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc) =0;
  virtual HOOKPROC SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc) =0;
#endif
  virtual WINBOOL UnhookWindowsHook (int nCode, HOOKPROC pfnFilterProc) =0;
  virtual HHOOK SetWindowsHookExA (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId) =0;
  virtual HHOOK SetWindowsHookExW (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId) =0;
  virtual WINBOOL UnhookWindowsHookEx (HHOOK hhk) =0;
  virtual LRESULT CallNextHookEx (HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL CheckMenuRadioItem (HMENU hmenu, UINT first, UINT last, UINT check, UINT flags) =0;
  virtual HBITMAP LoadBitmapA (HINSTANCE hInstance, LPCSTR lpBitmapName) =0;
  virtual HBITMAP LoadBitmapW (HINSTANCE hInstance, LPCWSTR lpBitmapName) =0;
  virtual HCURSOR LoadCursorA (HINSTANCE hInstance, LPCSTR lpCursorName) =0;
  virtual HCURSOR LoadCursorW (HINSTANCE hInstance, LPCWSTR lpCursorName) =0;
  virtual HCURSOR LoadCursorFromFileA (LPCSTR lpFileName) =0;
  virtual HCURSOR LoadCursorFromFileW (LPCWSTR lpFileName) =0;
  virtual HCURSOR CreateCursor (HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, CONST VOID * pvANDPlane, CONST VOID * pvXORPlane) =0;
  virtual WINBOOL DestroyCursor (HCURSOR hCursor) =0;
  virtual WINBOOL SetSystemCursor (HCURSOR hcur, DWORD id) =0;
  virtual HICON LoadIconA (HINSTANCE hInstance, LPCSTR lpIconName) =0;
  virtual HICON LoadIconW (HINSTANCE hInstance, LPCWSTR lpIconName) =0;
  virtual UINT PrivateExtractIconsA (LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags) =0;
  virtual UINT PrivateExtractIconsW (LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags) =0;
  virtual HICON CreateIcon (HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, CONST BYTE * lpbANDbits, CONST BYTE * lpbXORbits) =0;
  virtual WINBOOL DestroyIcon (HICON hIcon) =0;
  virtual int LookupIconIdFromDirectory (PBYTE presbits, WINBOOL fIcon) =0;
  virtual int LookupIconIdFromDirectoryEx (PBYTE presbits, WINBOOL fIcon, int cxDesired, int cyDesired, UINT Flags) =0;
  virtual HICON CreateIconFromResource (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer) =0;
  virtual HICON CreateIconFromResourceEx (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags) =0;
  virtual HANDLE LoadImageA (HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad) =0;
  virtual HANDLE LoadImageW (HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad) =0;
  virtual HANDLE CopyImage (HANDLE h, UINT type, int cx, int cy, UINT flags) =0;
  virtual WINBOOL DrawIconEx (HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags) =0;
  virtual HICON CreateIconIndirect (PICONINFO piconinfo) =0;
  virtual HICON CopyIcon (HICON hIcon) =0;
  virtual WINBOOL GetIconInfo (HICON hIcon, PICONINFO piconinfo) =0;
  virtual WINBOOL GetIconInfoExA (HICON hicon, PICONINFOEXA piconinfo) =0;
  virtual WINBOOL GetIconInfoExW (HICON hicon, PICONINFOEXW piconinfo) =0;
  virtual int LoadStringA (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax) =0;
  virtual int LoadStringW (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax) =0;
  virtual WINBOOL IsDialogMessageA (HWND hDlg, LPMSG lpMsg) =0;
  virtual WINBOOL IsDialogMessageW (HWND hDlg, LPMSG lpMsg) =0;
  virtual WINBOOL MapDialogRect (HWND hDlg, LPRECT lpRect) =0;
  virtual int DlgDirListA (HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType) =0;
  virtual int DlgDirListW (HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType) =0;
  virtual WINBOOL DlgDirSelectExA (HWND hwndDlg, LPSTR lpString, int chCount, int idListBox) =0;
  virtual WINBOOL DlgDirSelectExW (HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox) =0;
  virtual int DlgDirListComboBoxA (HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype) =0;
  virtual int DlgDirListComboBoxW (HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype) =0;
  virtual WINBOOL DlgDirSelectComboBoxExA (HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox) =0;
  virtual WINBOOL DlgDirSelectComboBoxExW (HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox) =0;
  virtual int SetScrollInfo (HWND hwnd, int nBar, LPCSCROLLINFO lpsi, WINBOOL redraw) =0;
  virtual WINBOOL GetScrollInfo (HWND hwnd, int nBar, LPSCROLLINFO lpsi) =0;
  virtual LRESULT DefFrameProcA (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT DefFrameProcW (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT DefMDIChildProcA (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT DefMDIChildProcW (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) =0;
  virtual WINBOOL TranslateMDISysAccel (HWND hWndClient, LPMSG lpMsg) =0;
  virtual UINT ArrangeIconicWindows (HWND hWnd) =0;
  virtual HWND CreateMDIWindowA (LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam) =0;
  virtual HWND CreateMDIWindowW (LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam) =0;
  virtual WORD TileWindows (HWND hwndParent, UINT wHow, CONST RECT * lpRect, UINT cKids, const HWND * lpKids) =0;
  virtual WORD CascadeWindows (HWND hwndParent, UINT wHow, CONST RECT * lpRect, UINT cKids, const HWND * lpKids) =0;
  virtual WINBOOL WinHelpA (HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData) =0;
  virtual WINBOOL WinHelpW (HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData) =0;
  virtual DWORD GetGuiResources (HANDLE hProcess, DWORD uiFlags) =0;
  virtual LONG ChangeDisplaySettingsA (LPDEVMODEA lpDevMode, DWORD dwFlags) =0;
  virtual LONG ChangeDisplaySettingsW (LPDEVMODEW lpDevMode, DWORD dwFlags) =0;
  virtual LONG ChangeDisplaySettingsExA (LPCSTR lpszDeviceName, LPDEVMODEA lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam) =0;
  virtual LONG ChangeDisplaySettingsExW (LPCWSTR lpszDeviceName, LPDEVMODEW lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam) =0;
  virtual WINBOOL EnumDisplaySettingsA (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode) =0;
  virtual WINBOOL EnumDisplaySettingsW (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode) =0;
  virtual WINBOOL EnumDisplaySettingsExA (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode, DWORD dwFlags) =0;
  virtual WINBOOL EnumDisplaySettingsExW (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode, DWORD dwFlags) =0;
  virtual WINBOOL EnumDisplayDevicesA (LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags) =0;
  virtual WINBOOL EnumDisplayDevicesW (LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags) =0;
  virtual LONG GetDisplayConfigBufferSizes (UINT32 flags, UINT32 * numPathArrayElements, UINT32 * numModeInfoArrayElements) =0;
  virtual LONG SetDisplayConfig (UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, UINT32 flags) =0;
  virtual LONG QueryDisplayConfig (UINT32 flags, UINT32 * numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 * numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID * currentTopologyId) =0;
  virtual LONG DisplayConfigGetDeviceInfo (DISPLAYCONFIG_DEVICE_INFO_HEADER * requestPacket) =0;
  virtual LONG DisplayConfigSetDeviceInfo (DISPLAYCONFIG_DEVICE_INFO_HEADER * setPacket) =0;
  virtual WINBOOL SystemParametersInfoA (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni) =0;
  virtual WINBOOL SystemParametersInfoW (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni) =0;
  virtual VOID SetDebugErrorLevel (DWORD dwLevel) =0;
  virtual VOID SetLastErrorEx (DWORD dwErrCode, DWORD dwType) =0;
  virtual int InternalGetWindowText (HWND hWnd, LPWSTR pString, int cchMaxCount) =0;
  virtual WINBOOL CancelShutdown (VOID) =0;
  virtual HMONITOR MonitorFromPoint (POINT pt, DWORD dwFlags) =0;
  virtual HMONITOR MonitorFromRect (LPCRECT lprc, DWORD dwFlags) =0;
  virtual HMONITOR MonitorFromWindow (HWND hwnd, DWORD dwFlags) =0;
  virtual WINBOOL EndTask (HWND hWnd, WINBOOL fShutDown, WINBOOL fForce) =0;
  virtual WINBOOL SoundSentry (VOID) =0;
  virtual WINBOOL GetMonitorInfoA (HMONITOR hMonitor, LPMONITORINFO lpmi) =0;
  virtual WINBOOL GetMonitorInfoW (HMONITOR hMonitor, LPMONITORINFO lpmi) =0;
  virtual WINBOOL EnumDisplayMonitors (HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData) =0;
  virtual VOID NotifyWinEvent (DWORD event, HWND hwnd, LONG idObject, LONG idChild) =0;
  virtual HWINEVENTHOOK SetWinEventHook (DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags) =0;
  virtual WINBOOL IsWinEventHookInstalled (DWORD event) =0;
  virtual WINBOOL UnhookWinEvent (HWINEVENTHOOK hWinEventHook) =0;
  virtual WINBOOL GetGUIThreadInfo (DWORD idThread, PGUITHREADINFO pgui) =0;
  virtual WINBOOL BlockInput (WINBOOL fBlockIt) =0;
  virtual UINT GetWindowModuleFileNameA (HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax) =0;
  virtual UINT GetWindowModuleFileNameW (HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax) =0;
  virtual WINBOOL SetProcessDPIAware (VOID) =0;
  virtual WINBOOL IsProcessDPIAware (VOID) =0;
  virtual WINBOOL GetCursorInfo (PCURSORINFO pci) =0;
  virtual WINBOOL GetWindowInfo (HWND hwnd, PWINDOWINFO pwi) =0;
  virtual WINBOOL GetTitleBarInfo (HWND hwnd, PTITLEBARINFO pti) =0;
  virtual WINBOOL GetMenuBarInfo (HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi) =0;
  virtual WINBOOL GetScrollBarInfo (HWND hwnd, LONG idObject, PSCROLLBARINFO psbi) =0;
  virtual WINBOOL GetComboBoxInfo (HWND hwndCombo, PCOMBOBOXINFO pcbi) =0;
  virtual HWND GetAncestor (HWND hwnd, UINT gaFlags) =0;
  virtual HWND RealChildWindowFromPoint (HWND hwndParent, POINT ptParentClientCoords) =0;
  virtual UINT RealGetWindowClassA (HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax) =0;
  virtual UINT RealGetWindowClassW (HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax) =0;
  virtual WINBOOL GetAltTabInfoA (HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText) =0;
  virtual WINBOOL GetAltTabInfoW (HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText) =0;
  virtual DWORD GetListBoxInfo (HWND hwnd) =0;
  virtual WINBOOL LockWorkStation (VOID) =0;
  virtual WINBOOL UserHandleGrantAccess (HANDLE hUserHandle, HANDLE hJob, WINBOOL bGrant) =0;
  virtual UINT GetRawInputData (HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader) =0;
  virtual UINT GetRawInputDeviceInfoA (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize) =0;
  virtual UINT GetRawInputDeviceInfoW (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize) =0;
  virtual UINT GetRawInputBuffer (PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader) =0;
  virtual WINBOOL RegisterRawInputDevices (PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize) =0;
  virtual UINT GetRegisteredRawInputDevices (PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize) =0;
  virtual UINT GetRawInputDeviceList (PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize) =0;
  virtual LRESULT DefRawInputProc (PRAWINPUT * paRawInput, INT nInput, UINT cbSizeHeader) =0;
  virtual WINBOOL GetPointerDevices (UINT32 * deviceCount, POINTER_DEVICE_INFO * pointerDevices) =0;
  virtual WINBOOL GetPointerDevice (HANDLE device, POINTER_DEVICE_INFO * pointerDevice) =0;
  virtual WINBOOL GetPointerDeviceProperties (HANDLE device, UINT32 * propertyCount, POINTER_DEVICE_PROPERTY * pointerProperties) =0;
  virtual WINBOOL RegisterPointerDeviceNotifications (HWND window, WINBOOL notifyRange) =0;
  virtual WINBOOL GetPointerDeviceRects (HANDLE device, RECT * pointerDeviceRect, RECT * displayRect) =0;
  virtual WINBOOL GetPointerDeviceCursors (HANDLE device, UINT32 * cursorCount, POINTER_DEVICE_CURSOR_INFO * deviceCursors) =0;
  virtual WINBOOL GetRawPointerDeviceData (UINT32 pointerId, UINT32 historyCount, UINT32 propertiesCount, POINTER_DEVICE_PROPERTY * pProperties, LONG * pValues) =0;
  virtual WINBOOL ChangeWindowMessageFilter (UINT message, DWORD dwFlag) =0;
  virtual WINBOOL ChangeWindowMessageFilterEx (HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct) =0;
  virtual WINBOOL GetGestureInfo (HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo) =0;
  virtual WINBOOL GetGestureExtraArgs (HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs) =0;
  virtual WINBOOL CloseGestureInfoHandle (HGESTUREINFO hGestureInfo) =0;
  virtual WINBOOL SetGestureConfig (HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize) =0;
  virtual WINBOOL GetGestureConfig (HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize) =0;
  virtual WINBOOL ShutdownBlockReasonCreate (HWND hWnd, LPCWSTR pwszReason) =0;
  virtual WINBOOL ShutdownBlockReasonQuery (HWND hWnd, LPWSTR pwszBuff, DWORD * pcchBuff) =0;
  virtual WINBOOL ShutdownBlockReasonDestroy (HWND hWnd) =0;
  virtual WINBOOL GetCurrentInputMessageSource (INPUT_MESSAGE_SOURCE * inputMessageSource) =0;
  virtual WINBOOL GetCIMSSM (INPUT_MESSAGE_SOURCE * inputMessageSource) =0;
  virtual WINBOOL GetAutoRotationState (PAR_STATE pState) =0;
  virtual WINBOOL GetDisplayAutoRotationPreferences (ORIENTATION_PREFERENCE * pOrientation) =0;
  virtual WINBOOL GetDisplayAutoRotationPreferencesByProcessId (DWORD dwProcessId, ORIENTATION_PREFERENCE * pOrientation, WINBOOL * fRotateScreen) =0;
  virtual WINBOOL SetDisplayAutoRotationPreferences (ORIENTATION_PREFERENCE orientation) =0;
  virtual WINBOOL IsImmersiveProcess (HANDLE hProcess) =0;
  virtual WINBOOL SetProcessRestrictionExemption (WINBOOL fEnableExemption) =0;
  virtual WINBOOL GetPointerInputTransform (UINT32 pointerId, UINT32 historyCount, UINT32 * inputTransform) =0;
  virtual WINBOOL IsMousePointerEnabled (void) =0;

  virtual UINT_PTR SetSystemTimer (HWND hwnd, UINT_PTR id, UINT timeout, void * unknown) =0;
  virtual DWORD CalcMenuBar (HWND hwnd, DWORD left, DWORD right, DWORD top, RECT * rect) =0;
  virtual UINT WINNLSGetIMEHotkey (HWND hwnd) =0;
  virtual HWND GetTaskmanWindow (void) =0;
  virtual BOOL DdeDisconnect (HCONV hConv) =0;
  virtual HSZ DdeCreateStringHandleA (DWORD idInst, LPCSTR psz, INT codepage) =0;
  virtual BOOL SetProcessDpiAwarenessInternal (DPI_AWARENESS awareness) =0;
  virtual BOOL SetDeskWallpaper (const char * filename) =0;
  virtual NTSTATUS User32ImmTranslateMessage (void * args, ULONG size) =0;
  virtual DWORD DdeGetData (HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff) =0;
  virtual DWORD_PTR SetSysColorsTemp (const COLORREF * pPens, const HBRUSH * pBrushes, DWORD_PTR n) =0;
  virtual LRESULT StaticWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LPBYTE DdeAccessData (HDDEDATA hData, LPDWORD pcbDataSize) =0;
  virtual BOOL DdeUnaccessData (HDDEDATA hData) =0;
  virtual UINT DdeInitializeA (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes) =0;
  virtual UINT DdeInitializeW (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes) =0;
  virtual BOOL DdeUninitialize (DWORD idInst) =0;
  virtual VOID LoadLocalFonts (VOID) =0;
  virtual LPSTR CharPrevExW (WORD codepage, LPCWSTR start, LPCWSTR ptr, DWORD flags) =0;
  virtual HWND GetProgmanWindow (void) =0;
  virtual DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext (DPI_AWARENESS_CONTEXT context) =0;
  virtual LPARAM PackDDElParam (UINT msg, UINT_PTR uiLo, UINT_PTR uiHi) =0;
  virtual BOOL DdeFreeDataHandle (HDDEDATA hData) =0;
  virtual BOOL AlignRects (LPRECT rect, DWORD b, DWORD c, DWORD d) =0;
  virtual DWORD DdeQueryStringW (DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, INT iCodePage) =0;
  virtual DWORD SetLogonNotifyWindow (HWINSTA hwinsta, HWND hwnd) =0;
  virtual HCURSOR GetCursorFrameInfo (HCURSOR handle, DWORD reserved, DWORD istep, DWORD * rate, DWORD * steps) =0;
  virtual DWORD DdeQueryStringA (DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, INT iCodePage) =0;
  virtual BOOL DdeSetQualityOfService (HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE * pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev) =0;
  virtual UINT DdeGetLastError (DWORD idInst) =0;
  virtual LRESULT ComboWndProcA (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) =0;
  virtual BOOL DdeDisconnectList (HCONVLIST hConvList) =0;
  virtual LRESULT SendIMEMessageExA (HWND hwnd, LPARAM lparam) =0;
  virtual INT DdeCmpStringHandles (HSZ hsz1, HSZ hsz2) =0;
  virtual DWORD RegisterTasklist (DWORD x) =0;
  virtual LRESULT IconTitleWndProc (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT SendIMEMessageExW (HWND hwnd, LPARAM lparam) =0;
  virtual LRESULT ComboWndProcW (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) =0;
  virtual HCONVLIST DdeConnectList (DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC) =0;
  virtual HCONV DdeQueryNextServer (HCONVLIST hConvList, HCONV hConvPrev) =0;
  virtual BOOL RegisterUserApiHook (const struct user_api_hook * new_hook, struct user_api_hook * old_hook) =0;
  virtual void UnregisterUserApiHook (void) =0;
  virtual LRESULT StaticWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT MDIClientWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual BOOL DdeKeepStringHandle (DWORD idInst, HSZ hsz) =0;
  virtual DWORD GetAppCompatFlags (HTASK hTask) =0;
  virtual HWND SetProgmanWindow (HWND hwnd) =0;
  virtual BOOL DdeEnableCallback (DWORD idInst, HCONV hConv, UINT wCmd) =0;
  virtual DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior (void) =0;
  virtual LRESULT MDIClientWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT EditWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT ButtonWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual HWND SetTaskmanWindow (HWND hwnd) =0;
  virtual BOOL DdeImpersonateClient (HCONV hConv) =0;
  virtual UINT DdeQueryConvInfo (HCONV hConv, DWORD id, PCONVINFO lpConvInfo) =0;
  virtual void CalcChildScroll (HWND hwnd, INT scroll) =0;
  virtual HCONV DdeConnect (DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC) =0;
  virtual HCONV DdeReconnect (HCONV hConv) =0;
  virtual LPWSTR CharNextExW (WORD codepage, LPCWSTR ptr, DWORD flags) =0;
  virtual LRESULT EditWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual BOOL GetProcessDpiAwarenessInternal (HANDLE process, DPI_AWARENESS * awareness) =0;
  virtual void RegisterSystemThread (DWORD flags, DWORD reserved) =0;
  virtual BOOL SetWindowCompositionAttribute (HWND hwnd, WINDOWCOMPOSITIONATTRIBDATA const * pwcad) =0;
  virtual HDDEDATA DdeClientTransaction (LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult) =0;
  virtual BOOL DdeAbandonTransaction (DWORD idInst, HCONV hConv, DWORD idTransaction) =0;
  virtual LRESULT ScrollBarWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual HKL LoadKeyboardLayoutEx (HKL layout, const WCHAR * name, UINT flags) =0;
  virtual int RegisterServicesProcess (DWORD ServicesProcessId) =0;
  virtual HDDEDATA DdeCreateDataHandle (DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd) =0;
  virtual HDDEDATA DdeAddData (HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff) =0;
  virtual LRESULT ScrollBarWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual HDDEDATA DdeNameService (DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd) =0;
  virtual LRESULT ButtonWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual INT GetSystemMetricsForDpi (INT index, UINT dpi) =0;
  virtual DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior (HWND hwnd) =0;
  virtual DWORD SetWindowStationUser (DWORD x1, DWORD x2) =0;
  virtual BOOL SystemParametersInfoForDpi (UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi) =0;
  virtual LRESULT MessageWndProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) =0;
  virtual BOOL IsWindowRedirectedForPrint (HWND hwnd) =0;
  virtual BOOL WINNLSGetEnableStatus (HWND hwnd) =0;
  virtual BOOL KillSystemTimer (HWND hwnd, UINT_PTR id) =0;
  virtual HSZ DdeCreateStringHandleW (DWORD idInst, LPCWSTR psz, INT codepage) =0;
  virtual INT_PTR MDI_MoreWindowsDlgProc (HWND hDlg, UINT iMsg, WPARAM wParam, LPARAM lParam) =0;
  virtual BOOL WINNLSEnableIME (HWND hwnd, BOOL enable) =0;
  virtual BOOL AdjustWindowRectExForDpi (LPRECT rect, DWORD style, BOOL menu, DWORD dwExStyle, UINT dpi) =0;
  virtual DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext (void) =0;
  virtual BOOL DdeFreeStringHandle (DWORD idInst, HSZ hsz) =0;
  virtual BOOL DrawCaptionTempA (HWND hwnd, HDC hdc, const RECT * rect, HFONT hFont, HICON hIcon, LPCSTR str, UINT uFlags) =0;
  virtual WORD TileChildWindows (HWND parent, UINT flags) =0;
  virtual LPARAM ReuseDDElParam (LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi) =0;
  virtual BOOL ImpersonateDdeClientWindow (HWND hWndClient, HWND hWndServer) =0;
  virtual UINT GetDpiForSystem (void) =0;
  virtual BOOL User32InitializeImmEntryTable (DWORD magic) =0;
  virtual BOOL EnableNonClientDpiScaling (HWND hwnd) =0;
  virtual BOOL ImmSetActiveContext (HWND, HIMC, BOOL) =0;
  virtual BOOL IsValidDpiAwarenessContext (DPI_AWARENESS_CONTEXT context) =0;
  virtual void ScrollChildren (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) =0;
  virtual WORD CascadeChildWindows (HWND parent, UINT flags) =0;
  virtual DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext (HWND hwnd) =0;
  virtual HDEVNOTIFY I_ScRegisterDeviceNotification (DEVICE_NOTIFICATION_DETAILS * details, LPVOID filter, DWORD flags) =0;
  virtual BOOL I_ScUnregisterDeviceNotification (HDEVNOTIFY handle) =0;
  virtual BOOL DdeSetUserHandle (HCONV hConv, DWORD id, DWORD hUser) =0;
  virtual BOOL DdePostAdvise (DWORD idInst, HSZ hszTopic, HSZ hszItem) =0;
  virtual DWORD GetAppCompatFlags2 (HTASK hTask) =0;
  virtual BOOL AreDpiAwarenessContextsEqual (DPI_AWARENESS_CONTEXT ctx1, DPI_AWARENESS_CONTEXT ctx2) =0;
  virtual DPI_AWARENESS GetAwarenessFromDpiAwarenessContext (DPI_AWARENESS_CONTEXT context) =0;
  virtual BOOL SetShellWindow (HWND hwnd) =0;
  virtual LRESULT ImeWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual UINT GetDpiForWindow (HWND hwnd) =0;
  virtual BOOL UnpackDDElParam (UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi) =0;
  virtual BOOL FreeDDElParam (UINT msg, LPARAM lParam) =0;
  virtual void UserRegisterWowHandlers (const struct wow_handlers16 * new_, struct wow_handlers32 * orig) =0;
  virtual LRESULT ImeWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT ListBoxWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual LRESULT ListBoxWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) =0;
  virtual DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior (DPI_HOSTING_BEHAVIOR value) =0;
  virtual DWORD RegisterLogonProcess (HANDLE hprocess, BOOL x) =0;

  virtual ~IUser32() =default;

  typedef std::unique_ptr<IUser32> instance_ptr_t;
  typedef std::function<instance_ptr_t ()> instance_factory_t;
  typedef std::function<void()> postinit_callback_t;

  static bool has_instance();
  static IUser32 * get_instance();
  static void set_instance(instance_ptr_t && upInstance);
  static void set_instance_factory(instance_factory_t const & instaceFactory, postinit_callback_t const & postinitCallback);

private:
  static instance_ptr_t upInstance_;
  static instance_factory_t instaceFactory_;
  static postinit_callback_t postinitCallback_;
}; //IUser32


class APIUser32 : public IUser32
{
public:
  virtual int wvsprintfA (LPSTR, LPCSTR, va_list arglist);
  virtual int wvsprintfW (LPWSTR, LPCWSTR, va_list arglist);
  virtual HKL LoadKeyboardLayoutA (LPCSTR pwszKLID, UINT Flags);
  virtual HKL LoadKeyboardLayoutW (LPCWSTR pwszKLID, UINT Flags);
  virtual HKL ActivateKeyboardLayout (HKL hkl, UINT Flags);
  virtual int ToUnicodeEx (UINT wVirtKey, UINT wScanCode, CONST BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
  virtual WINBOOL UnloadKeyboardLayout (HKL hkl);
  virtual WINBOOL GetKeyboardLayoutNameA (LPSTR pwszKLID);
  virtual WINBOOL GetKeyboardLayoutNameW (LPWSTR pwszKLID);
  virtual int GetKeyboardLayoutList (int nBuff, HKL * lpList);
  virtual HKL GetKeyboardLayout (DWORD idThread);
  virtual int GetMouseMovePointsEx (UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution);
  virtual HDESK CreateDesktopA (LPCSTR lpszDesktop, LPCSTR lpszDevice, LPDEVMODEA pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  virtual HDESK CreateDesktopW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, LPDEVMODEW pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  virtual HDESK CreateDesktopExA (LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
  virtual HDESK CreateDesktopExW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
  virtual HDESK OpenDesktopA (LPCSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  virtual HDESK OpenDesktopW (LPCWSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  virtual HDESK OpenInputDesktop (DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  virtual WINBOOL EnumDesktopsA (HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);
  virtual WINBOOL EnumDesktopsW (HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam);
  virtual WINBOOL EnumDesktopWindows (HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
  virtual WINBOOL SwitchDesktop (HDESK hDesktop);
  virtual WINBOOL SetThreadDesktop (HDESK hDesktop);
  virtual WINBOOL CloseDesktop (HDESK hDesktop);
  virtual HDESK GetThreadDesktop (DWORD dwThreadId);
  virtual HWINSTA CreateWindowStationA (LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  virtual HWINSTA CreateWindowStationW (LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  virtual HWINSTA OpenWindowStationA (LPCSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  virtual HWINSTA OpenWindowStationW (LPCWSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  virtual WINBOOL EnumWindowStationsA (WINSTAENUMPROCA lpEnumFunc, LPARAM lParam);
  virtual WINBOOL EnumWindowStationsW (WINSTAENUMPROCW lpEnumFunc, LPARAM lParam);
  virtual WINBOOL CloseWindowStation (HWINSTA hWinSta);
  virtual WINBOOL SetProcessWindowStation (HWINSTA hWinSta);
  virtual HWINSTA GetProcessWindowStation (VOID);
  virtual WINBOOL SetUserObjectSecurity (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
  virtual WINBOOL GetUserObjectSecurity (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);
  virtual WINBOOL GetUserObjectInformationA (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
  virtual WINBOOL GetUserObjectInformationW (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
  virtual WINBOOL SetUserObjectInformationA (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
  virtual WINBOOL SetUserObjectInformationW (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
  virtual WINBOOL IsHungAppWindow (HWND hwnd);
  virtual VOID DisableProcessWindowsGhosting (VOID);
  virtual UINT RegisterWindowMessageA (LPCSTR lpString);
  virtual UINT RegisterWindowMessageW (LPCWSTR lpString);
  virtual WINBOOL TrackMouseEvent (LPTRACKMOUSEEVENT lpEventTrack);
  virtual WINBOOL DrawEdge (HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);
  virtual WINBOOL DrawFrameControl (HDC, LPRECT, UINT, UINT);
  virtual WINBOOL DrawCaption (HWND hwnd, HDC hdc, CONST RECT * lprect, UINT flags);
  virtual WINBOOL DrawAnimatedRects (HWND hwnd, int idAni, CONST RECT * lprcFrom, CONST RECT * lprcTo);
  virtual WINBOOL GetMessageA (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
  virtual WINBOOL GetMessageW (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
  virtual WINBOOL TranslateMessage (CONST MSG * lpMsg);
  virtual LRESULT DispatchMessageA (CONST MSG * lpMsg);
  virtual LRESULT DispatchMessageW (CONST MSG * lpMsg);
  virtual WINBOOL SetMessageQueue (int cMessagesMax);
  virtual WINBOOL PeekMessageA (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
  virtual WINBOOL PeekMessageW (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
  virtual WINBOOL RegisterHotKey (HWND hWnd, int id, UINT fsModifiers, UINT vk);
  virtual WINBOOL UnregisterHotKey (HWND hWnd, int id);
  virtual WINBOOL ExitWindowsEx (UINT uFlags, DWORD dwReason);
  virtual WINBOOL SwapMouseButton (WINBOOL fSwap);
  virtual DWORD GetMessagePos (VOID);
  virtual LONG GetMessageTime (VOID);
  virtual LPARAM GetMessageExtraInfo (VOID);
  virtual DWORD GetUnpredictedMessagePos (VOID);
  virtual WINBOOL IsWow64Message (VOID);
  virtual LPARAM SetMessageExtraInfo (LPARAM lParam);
  virtual LRESULT SendMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT SendMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT SendMessageTimeoutA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
  virtual LRESULT SendMessageTimeoutW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
  virtual WINBOOL SendNotifyMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL SendNotifyMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL SendMessageCallbackA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
  virtual WINBOOL SendMessageCallbackW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
  virtual LONG BroadcastSystemMessageExA (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
  virtual LONG BroadcastSystemMessageExW (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
  virtual LONG BroadcastSystemMessageA (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LONG BroadcastSystemMessageW (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual HPOWERNOTIFY RegisterPowerSettingNotification (HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);
  virtual WINBOOL UnregisterPowerSettingNotification (HPOWERNOTIFY Handle);
  virtual HPOWERNOTIFY RegisterSuspendResumeNotification (HANDLE hRecipient, DWORD Flags);
  virtual WINBOOL UnregisterSuspendResumeNotification (HPOWERNOTIFY Handle);
  virtual WINBOOL PostMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL PostMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL PostThreadMessageA (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL PostThreadMessageW (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL AttachThreadInput (DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach);
  virtual WINBOOL ReplyMessage (LRESULT lResult);
  virtual WINBOOL WaitMessage (VOID);
  virtual DWORD WaitForInputIdle (HANDLE hProcess, DWORD dwMilliseconds);
  virtual LRESULT DefWindowProcA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT DefWindowProcW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual VOID PostQuitMessage (int nExitCode);
  virtual WINBOOL InSendMessage (VOID);
  virtual DWORD InSendMessageEx (LPVOID lpReserved);
  virtual UINT GetDoubleClickTime (VOID);
  virtual WINBOOL SetDoubleClickTime (UINT);
  virtual ATOM RegisterClassA (CONST WNDCLASSA * lpWndClass);
  virtual ATOM RegisterClassW (CONST WNDCLASSW * lpWndClass);
  virtual WINBOOL UnregisterClassA (LPCSTR lpClassName, HINSTANCE hInstance);
  virtual WINBOOL UnregisterClassW (LPCWSTR lpClassName, HINSTANCE hInstance);
  virtual WINBOOL GetClassInfoA (HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
  virtual WINBOOL GetClassInfoW (HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
  virtual ATOM RegisterClassExA (CONST WNDCLASSEXA *);
  virtual ATOM RegisterClassExW (CONST WNDCLASSEXW *);
  virtual WINBOOL GetClassInfoExA (HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
  virtual WINBOOL GetClassInfoExW (HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);
#ifdef STRICT
  virtual LRESULT CallWindowProcA (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT CallWindowProcW (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
#else
  virtual LRESULT CallWindowProcA (FARPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT CallWindowProcW (FARPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
#endif
  virtual HDEVNOTIFY RegisterDeviceNotificationA (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
  virtual HDEVNOTIFY RegisterDeviceNotificationW (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
  virtual WINBOOL UnregisterDeviceNotification (HDEVNOTIFY Handle);
  virtual HWND CreateWindowExA (DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
  virtual HWND CreateWindowExW (DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
  virtual WINBOOL IsWindow (HWND hWnd);
  virtual WINBOOL IsMenu (HMENU hMenu);
  virtual WINBOOL IsChild (HWND hWndParent, HWND hWnd);
  virtual WINBOOL DestroyWindow (HWND hWnd);
  virtual WINBOOL ShowWindow (HWND hWnd, int nCmdShow);
  virtual WINBOOL AnimateWindow (HWND hWnd, DWORD dwTime, DWORD dwFlags);
  virtual WINBOOL UpdateLayeredWindow (HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags);
  virtual WINBOOL UpdateLayeredWindowIndirect (HWND hWnd, const UPDATELAYEREDWINDOWINFO * pULWInfo);
  virtual WINBOOL GetLayeredWindowAttributes (HWND hwnd, COLORREF * pcrKey, BYTE * pbAlpha, DWORD * pdwFlags);
  virtual WINBOOL PrintWindow (HWND hwnd, HDC hdcBlt, UINT nFlags);
  virtual WINBOOL SetLayeredWindowAttributes (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
  virtual WINBOOL ShowWindowAsync (HWND hWnd, int nCmdShow);
  virtual WINBOOL FlashWindow (HWND hWnd, WINBOOL bInvert);
  virtual WINBOOL FlashWindowEx (PFLASHWINFO pfwi);
  virtual WINBOOL ShowOwnedPopups (HWND hWnd, WINBOOL fShow);
  virtual WINBOOL OpenIcon (HWND hWnd);
  virtual WINBOOL CloseWindow (HWND hWnd);
  virtual WINBOOL MoveWindow (HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint);
  virtual WINBOOL SetWindowPos (HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
  virtual WINBOOL GetWindowPlacement (HWND hWnd, WINDOWPLACEMENT * lpwndpl);
  virtual WINBOOL SetWindowPlacement (HWND hWnd, CONST WINDOWPLACEMENT * lpwndpl);
  virtual WINBOOL GetWindowDisplayAffinity (HWND hWnd, DWORD * pdwAffinity);
  virtual WINBOOL SetWindowDisplayAffinity (HWND hWnd, DWORD dwAffinity);
  virtual HDWP BeginDeferWindowPos (int nNumWindows);
  virtual HDWP DeferWindowPos (HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
  virtual WINBOOL EndDeferWindowPos (HDWP hWinPosInfo);
  virtual WINBOOL IsWindowVisible (HWND hWnd);
  virtual WINBOOL IsIconic (HWND hWnd);
  virtual WINBOOL AnyPopup (VOID);
  virtual WINBOOL BringWindowToTop (HWND hWnd);
  virtual WINBOOL IsZoomed (HWND hWnd);
  virtual HWND CreateDialogParamA (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual HWND CreateDialogParamW (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual HWND CreateDialogIndirectParamA (HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual HWND CreateDialogIndirectParamW (HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual INT_PTR DialogBoxParamA (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual INT_PTR DialogBoxParamW (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual INT_PTR DialogBoxIndirectParamA (HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual INT_PTR DialogBoxIndirectParamW (HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  virtual WINBOOL EndDialog (HWND hDlg, INT_PTR nResult);
  virtual HWND GetDlgItem (HWND hDlg, int nIDDlgItem);
  virtual WINBOOL SetDlgItemInt (HWND hDlg, int nIDDlgItem, UINT uValue, WINBOOL bSigned);
  virtual UINT GetDlgItemInt (HWND hDlg, int nIDDlgItem, WINBOOL * lpTranslated, WINBOOL bSigned);
  virtual WINBOOL SetDlgItemTextA (HWND hDlg, int nIDDlgItem, LPCSTR lpString);
  virtual WINBOOL SetDlgItemTextW (HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
  virtual UINT GetDlgItemTextA (HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax);
  virtual UINT GetDlgItemTextW (HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax);
  virtual WINBOOL CheckDlgButton (HWND hDlg, int nIDButton, UINT uCheck);
  virtual WINBOOL CheckRadioButton (HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
  virtual UINT IsDlgButtonChecked (HWND hDlg, int nIDButton);
  virtual LRESULT SendDlgItemMessageA (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT SendDlgItemMessageW (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual HWND GetNextDlgGroupItem (HWND hDlg, HWND hCtl, WINBOOL bPrevious);
  virtual HWND GetNextDlgTabItem (HWND hDlg, HWND hCtl, WINBOOL bPrevious);
  virtual int GetDlgCtrlID (HWND hWnd);
  virtual LONG GetDialogBaseUnits (VOID);
  virtual LRESULT DefDlgProcA (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT DefDlgProcW (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL CallMsgFilterA (LPMSG lpMsg, int nCode);
  virtual WINBOOL CallMsgFilterW (LPMSG lpMsg, int nCode);
  virtual WINBOOL OpenClipboard (HWND hWndNewOwner);
  virtual WINBOOL CloseClipboard (VOID);
  virtual DWORD GetClipboardSequenceNumber (VOID);
  virtual HWND GetClipboardOwner (VOID);
  virtual HWND SetClipboardViewer (HWND hWndNewViewer);
  virtual HWND GetClipboardViewer (VOID);
  virtual WINBOOL ChangeClipboardChain (HWND hWndRemove, HWND hWndNewNext);
  virtual HANDLE SetClipboardData (UINT uFormat, HANDLE hMem);
  virtual HANDLE GetClipboardData (UINT uFormat);
  virtual UINT RegisterClipboardFormatA (LPCSTR lpszFormat);
  virtual UINT RegisterClipboardFormatW (LPCWSTR lpszFormat);
  virtual int CountClipboardFormats (VOID);
  virtual UINT EnumClipboardFormats (UINT format);
  virtual int GetClipboardFormatNameA (UINT format, LPSTR lpszFormatName, int cchMaxCount);
  virtual int GetClipboardFormatNameW (UINT format, LPWSTR lpszFormatName, int cchMaxCount);
  virtual WINBOOL EmptyClipboard (VOID);
  virtual WINBOOL IsClipboardFormatAvailable (UINT format);
  virtual int GetPriorityClipboardFormat (UINT * paFormatPriorityList, int cFormats);
  virtual HWND GetOpenClipboardWindow (VOID);
  virtual WINBOOL AddClipboardFormatListener (HWND hwnd);
  virtual WINBOOL RemoveClipboardFormatListener (HWND hwnd);
  virtual WINBOOL GetUpdatedClipboardFormats (PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut);
  virtual WINBOOL CharToOemA (LPCSTR lpszSrc, LPSTR lpszDst);
  virtual WINBOOL CharToOemW (LPCWSTR lpszSrc, LPSTR lpszDst);
  virtual WINBOOL OemToCharA (LPCSTR lpszSrc, LPSTR lpszDst);
  virtual WINBOOL OemToCharW (LPCSTR lpszSrc, LPWSTR lpszDst);
  virtual WINBOOL CharToOemBuffA (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  virtual WINBOOL CharToOemBuffW (LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  virtual WINBOOL OemToCharBuffA (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  virtual WINBOOL OemToCharBuffW (LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength);
  virtual LPSTR CharUpperA (LPSTR lpsz);
  virtual LPWSTR CharUpperW (LPWSTR lpsz);
  virtual DWORD CharUpperBuffA (LPSTR lpsz, DWORD cchLength);
  virtual DWORD CharUpperBuffW (LPWSTR lpsz, DWORD cchLength);
  virtual LPSTR CharLowerA (LPSTR lpsz);
  virtual LPWSTR CharLowerW (LPWSTR lpsz);
  virtual DWORD CharLowerBuffA (LPSTR lpsz, DWORD cchLength);
  virtual DWORD CharLowerBuffW (LPWSTR lpsz, DWORD cchLength);
  virtual LPSTR CharNextA (LPCSTR lpsz);
  virtual LPWSTR CharNextW (LPCWSTR lpsz);
  virtual LPSTR CharPrevA (LPCSTR lpszStart, LPCSTR lpszCurrent);
  virtual LPWSTR CharPrevW (LPCWSTR lpszStart, LPCWSTR lpszCurrent);
  virtual LPSTR CharNextExA (WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);
  virtual LPSTR CharPrevExA (WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);
  virtual WINBOOL IsCharAlphaA (CHAR ch);
  virtual WINBOOL IsCharAlphaW (WCHAR ch);
  virtual WINBOOL IsCharAlphaNumericA (CHAR ch);
  virtual WINBOOL IsCharAlphaNumericW (WCHAR ch);
  virtual WINBOOL IsCharUpperA (CHAR ch);
  virtual WINBOOL IsCharUpperW (WCHAR ch);
  virtual WINBOOL IsCharLowerA (CHAR ch);
  virtual WINBOOL IsCharLowerW (WCHAR ch);
  virtual HWND SetFocus (HWND hWnd);
  virtual HWND GetActiveWindow (VOID);
  virtual HWND GetFocus (VOID);
  virtual UINT GetKBCodePage (VOID);
  virtual SHORT GetKeyState (int nVirtKey);
  virtual SHORT GetAsyncKeyState (int vKey);
  virtual WINBOOL GetKeyboardState (PBYTE lpKeyState);
  virtual WINBOOL SetKeyboardState (LPBYTE lpKeyState);
  virtual int GetKeyNameTextA (LONG lParam, LPSTR lpString, int cchSize);
  virtual int GetKeyNameTextW (LONG lParam, LPWSTR lpString, int cchSize);
  virtual int GetKeyboardType (int nTypeFlag);
  virtual int ToAscii (UINT uVirtKey, UINT uScanCode, CONST BYTE * lpKeyState, LPWORD lpChar, UINT uFlags);
  virtual int ToAsciiEx (UINT uVirtKey, UINT uScanCode, CONST BYTE * lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
  virtual int ToUnicode (UINT wVirtKey, UINT wScanCode, CONST BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
  virtual DWORD OemKeyScan (WORD wOemChar);
  virtual SHORT VkKeyScanA (CHAR ch);
  virtual SHORT VkKeyScanW (WCHAR ch);
  virtual SHORT VkKeyScanExA (CHAR ch, HKL dwhkl);
  virtual SHORT VkKeyScanExW (WCHAR ch, HKL dwhkl);
  virtual VOID keybd_event (BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);
  virtual VOID mouse_event (DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
  virtual UINT SendInput (UINT cInputs, LPINPUT pInputs, int cbSize);
  virtual WINBOOL GetTouchInputInfo (HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);
  virtual WINBOOL CloseTouchInputHandle (HTOUCHINPUT hTouchInput);
  virtual WINBOOL RegisterTouchWindow (HWND hwnd, ULONG ulFlags);
  virtual WINBOOL UnregisterTouchWindow (HWND hwnd);
  virtual WINBOOL IsTouchWindow (HWND hwnd, PULONG pulFlags);
  virtual WINBOOL InitializeTouchInjection (UINT32 maxCount, DWORD dwMode);
  virtual WINBOOL InjectTouchInput (UINT32 count, CONST POINTER_TOUCH_INFO * contacts);
  virtual WINBOOL GetPointerType (UINT32 pointerId, POINTER_INPUT_TYPE * pointerType);
  virtual WINBOOL GetPointerCursorId (UINT32 pointerId, UINT32 * cursorId);
  virtual WINBOOL GetPointerInfo (UINT32 pointerId, POINTER_INFO * pointerInfo);
  virtual WINBOOL GetPointerInfoHistory (UINT32 pointerId, UINT32 * entriesCount, POINTER_INFO * pointerInfo);
  virtual WINBOOL GetPointerFrameInfo (UINT32 pointerId, UINT32 * pointerCount, POINTER_INFO * pointerInfo);
  virtual WINBOOL GetPointerFrameInfoHistory (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_INFO * pointerInfo);
  virtual WINBOOL GetPointerTouchInfo (UINT32 pointerId, POINTER_TOUCH_INFO * touchInfo);
  virtual WINBOOL GetPointerTouchInfoHistory (UINT32 pointerId, UINT32 * entriesCount, POINTER_TOUCH_INFO * touchInfo);
  virtual WINBOOL GetPointerFrameTouchInfo (UINT32 pointerId, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo);
  virtual WINBOOL GetPointerFrameTouchInfoHistory (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo);
  virtual WINBOOL GetPointerPenInfo (UINT32 pointerId, POINTER_PEN_INFO * penInfo);
  virtual WINBOOL GetPointerPenInfoHistory (UINT32 pointerId, UINT32 * entriesCount, POINTER_PEN_INFO * penInfo);
  virtual WINBOOL GetPointerFramePenInfo (UINT32 pointerId, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo);
  virtual WINBOOL GetPointerFramePenInfoHistory (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo);
  virtual WINBOOL SkipPointerFrameMessages (UINT32 pointerId);
  virtual WINBOOL RegisterPointerInputTarget (HWND hwnd, POINTER_INPUT_TYPE pointerType);
  virtual WINBOOL UnregisterPointerInputTarget (HWND hwnd, POINTER_INPUT_TYPE pointerType);
  virtual WINBOOL EnableMouseInPointer (WINBOOL fEnable);
  virtual WINBOOL IsMouseInPointerEnabled (VOID);
  virtual WINBOOL RegisterTouchHitTestingWindow (HWND hwnd, ULONG value);
  virtual WINBOOL EvaluateProximityToRect (const RECT * controlBoundingBox, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval);
  virtual WINBOOL EvaluateProximityToPolygon (UINT32 numVertices, const POINT * controlPolygon, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval);
  virtual LRESULT PackTouchHitTestingProximityEvaluation (const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval);
  virtual WINBOOL GetWindowFeedbackSetting (HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 * pSize, VOID * config);
  virtual WINBOOL SetWindowFeedbackSetting (HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 size, CONST VOID * configuration);
  virtual WINBOOL GetLastInputInfo (PLASTINPUTINFO plii);
  virtual UINT MapVirtualKeyA (UINT uCode, UINT uMapType);
  virtual UINT MapVirtualKeyW (UINT uCode, UINT uMapType);
  virtual UINT MapVirtualKeyExA (UINT uCode, UINT uMapType, HKL dwhkl);
  virtual UINT MapVirtualKeyExW (UINT uCode, UINT uMapType, HKL dwhkl);
  virtual WINBOOL GetInputState (VOID);
  virtual DWORD GetQueueStatus (UINT flags);
  virtual HWND GetCapture (VOID);
  virtual HWND SetCapture (HWND hWnd);
  virtual WINBOOL ReleaseCapture (VOID);
  virtual DWORD MsgWaitForMultipleObjects (DWORD nCount, CONST HANDLE * pHandles, WINBOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
  virtual DWORD MsgWaitForMultipleObjectsEx (DWORD nCount, CONST HANDLE * pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);
  virtual UINT_PTR SetTimer (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
  virtual WINBOOL KillTimer (HWND hWnd, UINT_PTR uIDEvent);
  virtual WINBOOL IsWindowUnicode (HWND hWnd);
  virtual WINBOOL EnableWindow (HWND hWnd, WINBOOL bEnable);
  virtual WINBOOL IsWindowEnabled (HWND hWnd);
  virtual HACCEL LoadAcceleratorsA (HINSTANCE hInstance, LPCSTR lpTableName);
  virtual HACCEL LoadAcceleratorsW (HINSTANCE hInstance, LPCWSTR lpTableName);
  virtual HACCEL CreateAcceleratorTableA (LPACCEL paccel, int cAccel);
  virtual HACCEL CreateAcceleratorTableW (LPACCEL paccel, int cAccel);
  virtual WINBOOL DestroyAcceleratorTable (HACCEL hAccel);
  virtual int CopyAcceleratorTableA (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
  virtual int CopyAcceleratorTableW (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
  virtual int TranslateAcceleratorA (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
  virtual int TranslateAcceleratorW (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
  virtual UINT_PTR SetCoalescableTimer (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc, ULONG uToleranceDelay);
  virtual int GetSystemMetrics (int nIndex);
  virtual HMENU LoadMenuA (HINSTANCE hInstance, LPCSTR lpMenuName);
  virtual HMENU LoadMenuW (HINSTANCE hInstance, LPCWSTR lpMenuName);
  virtual HMENU LoadMenuIndirectA (CONST MENUTEMPLATEA * lpMenuTemplate);
  virtual HMENU LoadMenuIndirectW (CONST MENUTEMPLATEW * lpMenuTemplate);
  virtual HMENU GetMenu (HWND hWnd);
  virtual WINBOOL SetMenu (HWND hWnd, HMENU hMenu);
  virtual WINBOOL ChangeMenuA (HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags);
  virtual WINBOOL ChangeMenuW (HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags);
  virtual WINBOOL HiliteMenuItem (HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite);
  virtual int GetMenuStringA (HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags);
  virtual int GetMenuStringW (HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags);
  virtual UINT GetMenuState (HMENU hMenu, UINT uId, UINT uFlags);
  virtual WINBOOL DrawMenuBar (HWND hWnd);
  virtual HMENU GetSystemMenu (HWND hWnd, WINBOOL bRevert);
  virtual HMENU CreateMenu (VOID);
  virtual HMENU CreatePopupMenu (VOID);
  virtual WINBOOL DestroyMenu (HMENU hMenu);
  virtual DWORD CheckMenuItem (HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
  virtual WINBOOL EnableMenuItem (HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
  virtual HMENU GetSubMenu (HMENU hMenu, int nPos);
  virtual UINT GetMenuItemID (HMENU hMenu, int nPos);
  virtual int GetMenuItemCount (HMENU hMenu);
  virtual WINBOOL InsertMenuA (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
  virtual WINBOOL InsertMenuW (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
  virtual WINBOOL AppendMenuA (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
  virtual WINBOOL AppendMenuW (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
  virtual WINBOOL ModifyMenuA (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
  virtual WINBOOL ModifyMenuW (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
  virtual WINBOOL RemoveMenu (HMENU hMenu, UINT uPosition, UINT uFlags);
  virtual WINBOOL DeleteMenu (HMENU hMenu, UINT uPosition, UINT uFlags);
  virtual WINBOOL SetMenuItemBitmaps (HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);
  virtual LONG GetMenuCheckMarkDimensions (VOID);
  virtual WINBOOL TrackPopupMenu (HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, CONST RECT * prcRect);
  virtual WINBOOL TrackPopupMenuEx (HMENU, UINT, int, int, HWND, LPTPMPARAMS);
  virtual WINBOOL GetMenuInfo (HMENU, LPMENUINFO);
  virtual WINBOOL SetMenuInfo (HMENU, LPCMENUINFO);
  virtual WINBOOL EndMenu (VOID);
  virtual WINBOOL CalculatePopupWindowPosition (const POINT * anchorPoint, const SIZE * windowSize, UINT flags, RECT * excludeRect, RECT * popupWindowPosition);
  virtual WINBOOL InsertMenuItemA (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOA lpmi);
  virtual WINBOOL InsertMenuItemW (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOW lpmi);
  virtual WINBOOL GetMenuItemInfoA (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOA lpmii);
  virtual WINBOOL GetMenuItemInfoW (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOW lpmii);
  virtual WINBOOL SetMenuItemInfoA (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOA lpmii);
  virtual WINBOOL SetMenuItemInfoW (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOW lpmii);
  virtual UINT GetMenuDefaultItem (HMENU hMenu, UINT fByPos, UINT gmdiFlags);
  virtual WINBOOL SetMenuDefaultItem (HMENU hMenu, UINT uItem, UINT fByPos);
  virtual WINBOOL GetMenuItemRect (HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
  virtual int MenuItemFromPoint (HWND hWnd, HMENU hMenu, POINT ptScreen);
  virtual DWORD DragObject (HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur);
  virtual WINBOOL DragDetect (HWND hwnd, POINT pt);
  virtual WINBOOL DrawIcon (HDC hDC, int X, int Y, HICON hIcon);
  virtual int DrawTextA (HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format);
  virtual int DrawTextW (HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format);
  virtual int DrawTextExA (HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
  virtual int DrawTextExW (HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
  virtual WINBOOL GrayStringA (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
  virtual WINBOOL GrayStringW (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
  virtual WINBOOL DrawStateA (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
  virtual WINBOOL DrawStateW (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
  virtual LONG TabbedTextOutA (HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions, int nTabOrigin);
  virtual LONG TabbedTextOutW (HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions, int nTabOrigin);
  virtual DWORD GetTabbedTextExtentA (HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions);
  virtual DWORD GetTabbedTextExtentW (HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions);
  virtual WINBOOL UpdateWindow (HWND hWnd);
  virtual HWND SetActiveWindow (HWND hWnd);
  virtual HWND GetForegroundWindow (VOID);
  virtual WINBOOL PaintDesktop (HDC hdc);
  virtual VOID SwitchToThisWindow (HWND hwnd, WINBOOL fUnknown);
  virtual WINBOOL SetForegroundWindow (HWND hWnd);
  virtual WINBOOL AllowSetForegroundWindow (DWORD dwProcessId);
  virtual WINBOOL LockSetForegroundWindow (UINT uLockCode);
  virtual HWND WindowFromDC (HDC hDC);
  virtual HDC GetDC (HWND hWnd);
  virtual HDC GetDCEx (HWND hWnd, HRGN hrgnClip, DWORD flags);
  virtual HDC GetWindowDC (HWND hWnd);
  virtual int ReleaseDC (HWND hWnd, HDC hDC);
  virtual HDC BeginPaint (HWND hWnd, LPPAINTSTRUCT lpPaint);
  virtual WINBOOL EndPaint (HWND hWnd, CONST PAINTSTRUCT * lpPaint);
  virtual WINBOOL GetUpdateRect (HWND hWnd, LPRECT lpRect, WINBOOL bErase);
  virtual int GetUpdateRgn (HWND hWnd, HRGN hRgn, WINBOOL bErase);
  virtual int SetWindowRgn (HWND hWnd, HRGN hRgn, WINBOOL bRedraw);
  virtual int GetWindowRgn (HWND hWnd, HRGN hRgn);
  virtual int GetWindowRgnBox (HWND hWnd, LPRECT lprc);
  virtual int ExcludeUpdateRgn (HDC hDC, HWND hWnd);
  virtual WINBOOL InvalidateRect (HWND hWnd, CONST RECT * lpRect, WINBOOL bErase);
  virtual WINBOOL ValidateRect (HWND hWnd, CONST RECT * lpRect);
  virtual WINBOOL InvalidateRgn (HWND hWnd, HRGN hRgn, WINBOOL bErase);
  virtual WINBOOL ValidateRgn (HWND hWnd, HRGN hRgn);
  virtual WINBOOL RedrawWindow (HWND hWnd, CONST RECT * lprcUpdate, HRGN hrgnUpdate, UINT flags);
  virtual WINBOOL LockWindowUpdate (HWND hWndLock);
  virtual WINBOOL ScrollWindow (HWND hWnd, int XAmount, int YAmount, CONST RECT * lpRect, CONST RECT * lpClipRect);
  virtual WINBOOL ScrollDC (HDC hDC, int dx, int dy, CONST RECT * lprcScroll, CONST RECT * lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);
  virtual int ScrollWindowEx (HWND hWnd, int dx, int dy, CONST RECT * prcScroll, CONST RECT * prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);
  virtual int SetScrollPos (HWND hWnd, int nBar, int nPos, WINBOOL bRedraw);
  virtual int GetScrollPos (HWND hWnd, int nBar);
  virtual WINBOOL SetScrollRange (HWND hWnd, int nBar, int nMinPos, int nMaxPos, WINBOOL bRedraw);
  virtual WINBOOL GetScrollRange (HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos);
  virtual WINBOOL ShowScrollBar (HWND hWnd, int wBar, WINBOOL bShow);
  virtual WINBOOL EnableScrollBar (HWND hWnd, UINT wSBflags, UINT wArrows);
  virtual WINBOOL SetPropA (HWND hWnd, LPCSTR lpString, HANDLE hData);
  virtual WINBOOL SetPropW (HWND hWnd, LPCWSTR lpString, HANDLE hData);
  virtual HANDLE GetPropA (HWND hWnd, LPCSTR lpString);
  virtual HANDLE GetPropW (HWND hWnd, LPCWSTR lpString);
  virtual HANDLE RemovePropA (HWND hWnd, LPCSTR lpString);
  virtual HANDLE RemovePropW (HWND hWnd, LPCWSTR lpString);
  virtual int EnumPropsExA (HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam);
  virtual int EnumPropsExW (HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam);
  virtual int EnumPropsA (HWND hWnd, PROPENUMPROCA lpEnumFunc);
  virtual int EnumPropsW (HWND hWnd, PROPENUMPROCW lpEnumFunc);
  virtual WINBOOL SetWindowTextA (HWND hWnd, LPCSTR lpString);
  virtual WINBOOL SetWindowTextW (HWND hWnd, LPCWSTR lpString);
  virtual int GetWindowTextA (HWND hWnd, LPSTR lpString, int nMaxCount);
  virtual int GetWindowTextW (HWND hWnd, LPWSTR lpString, int nMaxCount);
  virtual int GetWindowTextLengthA (HWND hWnd);
  virtual int GetWindowTextLengthW (HWND hWnd);
  virtual WINBOOL GetClientRect (HWND hWnd, LPRECT lpRect);
  virtual WINBOOL GetWindowRect (HWND hWnd, LPRECT lpRect);
  virtual WINBOOL AdjustWindowRect (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu);
  virtual WINBOOL AdjustWindowRectEx (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu, DWORD dwExStyle);
  virtual WINBOOL SetWindowContextHelpId (HWND, DWORD);
  virtual DWORD GetWindowContextHelpId (HWND);
  virtual WINBOOL SetMenuContextHelpId (HMENU, DWORD);
  virtual DWORD GetMenuContextHelpId (HMENU);
  virtual int MessageBoxA (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
  virtual int MessageBoxW (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
  virtual int MessageBoxExA (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId);
  virtual int MessageBoxExW (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);
  virtual int MessageBoxIndirectA (CONST MSGBOXPARAMSA * lpmbp);
  virtual int MessageBoxIndirectW (CONST MSGBOXPARAMSW * lpmbp);
  virtual WINBOOL MessageBeep (UINT uType);
  virtual int ShowCursor (WINBOOL bShow);
  virtual WINBOOL SetCursorPos (int X, int Y);
  virtual HCURSOR SetCursor (HCURSOR hCursor);
  virtual WINBOOL GetCursorPos (LPPOINT lpPoint);
  virtual WINBOOL ClipCursor (CONST RECT * lpRect);
  virtual WINBOOL GetClipCursor (LPRECT lpRect);
  virtual HCURSOR GetCursor (VOID);
  virtual WINBOOL CreateCaret (HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight);
  virtual UINT GetCaretBlinkTime (VOID);
  virtual WINBOOL SetCaretBlinkTime (UINT uMSeconds);
  virtual WINBOOL DestroyCaret (VOID);
  virtual WINBOOL HideCaret (HWND hWnd);
  virtual WINBOOL ShowCaret (HWND hWnd);
  virtual WINBOOL SetCaretPos (int X, int Y);
  virtual WINBOOL GetCaretPos (LPPOINT lpPoint);
  virtual WINBOOL ClientToScreen (HWND hWnd, LPPOINT lpPoint);
  virtual WINBOOL ScreenToClient (HWND hWnd, LPPOINT lpPoint);
  virtual int MapWindowPoints (HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
  virtual HWND WindowFromPoint (POINT Point);
  virtual HWND ChildWindowFromPoint (HWND hWndParent, POINT Point);
  virtual HWND ChildWindowFromPointEx (HWND hwnd, POINT pt, UINT flags);
  virtual WINBOOL SetPhysicalCursorPos (int X, int Y);
  virtual WINBOOL GetPhysicalCursorPos (LPPOINT lpPoint);
  virtual WINBOOL LogicalToPhysicalPoint (HWND hWnd, LPPOINT lpPoint);
  virtual WINBOOL PhysicalToLogicalPoint (HWND hWnd, LPPOINT lpPoint);
  virtual HWND WindowFromPhysicalPoint (POINT Point);
  virtual DWORD GetSysColor (int nIndex);
  virtual HBRUSH GetSysColorBrush (int nIndex);
  virtual WINBOOL SetSysColors (int cElements, CONST INT * lpaElements, CONST COLORREF * lpaRgbValues);
  virtual WINBOOL DrawFocusRect (HDC hDC, CONST RECT * lprc);
  virtual int FillRect (HDC hDC, CONST RECT * lprc, HBRUSH hbr);
  virtual int FrameRect (HDC hDC, CONST RECT * lprc, HBRUSH hbr);
  virtual WINBOOL InvertRect (HDC hDC, CONST RECT * lprc);
  virtual WINBOOL SetRect (LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
  virtual WINBOOL SetRectEmpty (LPRECT lprc);
  virtual WINBOOL CopyRect (LPRECT lprcDst, CONST RECT * lprcSrc);
  virtual WINBOOL InflateRect (LPRECT lprc, int dx, int dy);
  virtual WINBOOL IntersectRect (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2);
  virtual WINBOOL UnionRect (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2);
  virtual WINBOOL SubtractRect (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2);
  virtual WINBOOL OffsetRect (LPRECT lprc, int dx, int dy);
  virtual WINBOOL IsRectEmpty (CONST RECT * lprc);
  virtual WINBOOL EqualRect (CONST RECT * lprc1, CONST RECT * lprc2);
  virtual WINBOOL PtInRect (CONST RECT * lprc, POINT pt);
  virtual WORD GetWindowWord (HWND hWnd, int nIndex);
  virtual WORD SetWindowWord (HWND hWnd, int nIndex, WORD wNewWord);
  virtual LONG GetWindowLongA (HWND hWnd, int nIndex);
  virtual LONG GetWindowLongW (HWND hWnd, int nIndex);
  virtual LONG SetWindowLongA (HWND hWnd, int nIndex, LONG dwNewLong);
  virtual LONG SetWindowLongW (HWND hWnd, int nIndex, LONG dwNewLong);
  virtual LONG_PTR GetWindowLongPtrA (HWND hWnd, int nIndex);
  virtual LONG_PTR GetWindowLongPtrW (HWND hWnd, int nIndex);
  virtual LONG_PTR SetWindowLongPtrA (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  virtual LONG_PTR SetWindowLongPtrW (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  virtual WORD GetClassWord (HWND hWnd, int nIndex);
  virtual WORD SetClassWord (HWND hWnd, int nIndex, WORD wNewWord);
  virtual DWORD GetClassLongA (HWND hWnd, int nIndex);
  virtual DWORD GetClassLongW (HWND hWnd, int nIndex);
  virtual DWORD SetClassLongA (HWND hWnd, int nIndex, LONG dwNewLong);
  virtual DWORD SetClassLongW (HWND hWnd, int nIndex, LONG dwNewLong);
  virtual ULONG_PTR GetClassLongPtrA (HWND hWnd, int nIndex);
  virtual ULONG_PTR GetClassLongPtrW (HWND hWnd, int nIndex);
  virtual ULONG_PTR SetClassLongPtrA (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  virtual ULONG_PTR SetClassLongPtrW (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  virtual WINBOOL GetProcessDefaultLayout (DWORD * pdwDefaultLayout);
  virtual WINBOOL SetProcessDefaultLayout (DWORD dwDefaultLayout);
  virtual HWND GetDesktopWindow (VOID);
  virtual HWND GetParent (HWND hWnd);
  virtual HWND SetParent (HWND hWndChild, HWND hWndNewParent);
  virtual WINBOOL EnumChildWindows (HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
  virtual HWND FindWindowA (LPCSTR lpClassName, LPCSTR lpWindowName);
  virtual HWND FindWindowW (LPCWSTR lpClassName, LPCWSTR lpWindowName);
  virtual HWND FindWindowExA (HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);
  virtual HWND FindWindowExW (HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);
  virtual HWND GetShellWindow (VOID);
  virtual WINBOOL RegisterShellHookWindow (HWND hwnd);
  virtual WINBOOL DeregisterShellHookWindow (HWND hwnd);
  virtual WINBOOL EnumWindows (WNDENUMPROC lpEnumFunc, LPARAM lParam);
  virtual WINBOOL EnumThreadWindows (DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);
  virtual int GetClassNameA (HWND hWnd, LPSTR lpClassName, int nMaxCount);
  virtual int GetClassNameW (HWND hWnd, LPWSTR lpClassName, int nMaxCount);
  virtual HWND GetTopWindow (HWND hWnd);
  virtual DWORD GetWindowThreadProcessId (HWND hWnd, LPDWORD lpdwProcessId);
  virtual WINBOOL IsGUIThread (WINBOOL bConvert);
  virtual HWND GetLastActivePopup (HWND hWnd);
  virtual HWND GetWindow (HWND hWnd, UINT uCmd);
#ifdef STRICT
  virtual HHOOK SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc);
  virtual HHOOK SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc);
#else
  virtual HOOKPROC SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc);
  virtual HOOKPROC SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc);
#endif
  virtual WINBOOL UnhookWindowsHook (int nCode, HOOKPROC pfnFilterProc);
  virtual HHOOK SetWindowsHookExA (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
  virtual HHOOK SetWindowsHookExW (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
  virtual WINBOOL UnhookWindowsHookEx (HHOOK hhk);
  virtual LRESULT CallNextHookEx (HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL CheckMenuRadioItem (HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);
  virtual HBITMAP LoadBitmapA (HINSTANCE hInstance, LPCSTR lpBitmapName);
  virtual HBITMAP LoadBitmapW (HINSTANCE hInstance, LPCWSTR lpBitmapName);
  virtual HCURSOR LoadCursorA (HINSTANCE hInstance, LPCSTR lpCursorName);
  virtual HCURSOR LoadCursorW (HINSTANCE hInstance, LPCWSTR lpCursorName);
  virtual HCURSOR LoadCursorFromFileA (LPCSTR lpFileName);
  virtual HCURSOR LoadCursorFromFileW (LPCWSTR lpFileName);
  virtual HCURSOR CreateCursor (HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, CONST VOID * pvANDPlane, CONST VOID * pvXORPlane);
  virtual WINBOOL DestroyCursor (HCURSOR hCursor);
  virtual WINBOOL SetSystemCursor (HCURSOR hcur, DWORD id);
  virtual HICON LoadIconA (HINSTANCE hInstance, LPCSTR lpIconName);
  virtual HICON LoadIconW (HINSTANCE hInstance, LPCWSTR lpIconName);
  virtual UINT PrivateExtractIconsA (LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags);
  virtual UINT PrivateExtractIconsW (LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags);
  virtual HICON CreateIcon (HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, CONST BYTE * lpbANDbits, CONST BYTE * lpbXORbits);
  virtual WINBOOL DestroyIcon (HICON hIcon);
  virtual int LookupIconIdFromDirectory (PBYTE presbits, WINBOOL fIcon);
  virtual int LookupIconIdFromDirectoryEx (PBYTE presbits, WINBOOL fIcon, int cxDesired, int cyDesired, UINT Flags);
  virtual HICON CreateIconFromResource (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer);
  virtual HICON CreateIconFromResourceEx (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags);
  virtual HANDLE LoadImageA (HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad);
  virtual HANDLE LoadImageW (HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad);
  virtual HANDLE CopyImage (HANDLE h, UINT type, int cx, int cy, UINT flags);
  virtual WINBOOL DrawIconEx (HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
  virtual HICON CreateIconIndirect (PICONINFO piconinfo);
  virtual HICON CopyIcon (HICON hIcon);
  virtual WINBOOL GetIconInfo (HICON hIcon, PICONINFO piconinfo);
  virtual WINBOOL GetIconInfoExA (HICON hicon, PICONINFOEXA piconinfo);
  virtual WINBOOL GetIconInfoExW (HICON hicon, PICONINFOEXW piconinfo);
  virtual int LoadStringA (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
  virtual int LoadStringW (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
  virtual WINBOOL IsDialogMessageA (HWND hDlg, LPMSG lpMsg);
  virtual WINBOOL IsDialogMessageW (HWND hDlg, LPMSG lpMsg);
  virtual WINBOOL MapDialogRect (HWND hDlg, LPRECT lpRect);
  virtual int DlgDirListA (HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
  virtual int DlgDirListW (HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
  virtual WINBOOL DlgDirSelectExA (HWND hwndDlg, LPSTR lpString, int chCount, int idListBox);
  virtual WINBOOL DlgDirSelectExW (HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox);
  virtual int DlgDirListComboBoxA (HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
  virtual int DlgDirListComboBoxW (HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
  virtual WINBOOL DlgDirSelectComboBoxExA (HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox);
  virtual WINBOOL DlgDirSelectComboBoxExW (HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox);
  virtual int SetScrollInfo (HWND hwnd, int nBar, LPCSCROLLINFO lpsi, WINBOOL redraw);
  virtual WINBOOL GetScrollInfo (HWND hwnd, int nBar, LPSCROLLINFO lpsi);
  virtual LRESULT DefFrameProcA (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT DefFrameProcW (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT DefMDIChildProcA (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT DefMDIChildProcW (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  virtual WINBOOL TranslateMDISysAccel (HWND hWndClient, LPMSG lpMsg);
  virtual UINT ArrangeIconicWindows (HWND hWnd);
  virtual HWND CreateMDIWindowA (LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
  virtual HWND CreateMDIWindowW (LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
  virtual WORD TileWindows (HWND hwndParent, UINT wHow, CONST RECT * lpRect, UINT cKids, const HWND * lpKids);
  virtual WORD CascadeWindows (HWND hwndParent, UINT wHow, CONST RECT * lpRect, UINT cKids, const HWND * lpKids);
  virtual WINBOOL WinHelpA (HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
  virtual WINBOOL WinHelpW (HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
  virtual DWORD GetGuiResources (HANDLE hProcess, DWORD uiFlags);
  virtual LONG ChangeDisplaySettingsA (LPDEVMODEA lpDevMode, DWORD dwFlags);
  virtual LONG ChangeDisplaySettingsW (LPDEVMODEW lpDevMode, DWORD dwFlags);
  virtual LONG ChangeDisplaySettingsExA (LPCSTR lpszDeviceName, LPDEVMODEA lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
  virtual LONG ChangeDisplaySettingsExW (LPCWSTR lpszDeviceName, LPDEVMODEW lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
  virtual WINBOOL EnumDisplaySettingsA (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode);
  virtual WINBOOL EnumDisplaySettingsW (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode);
  virtual WINBOOL EnumDisplaySettingsExA (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode, DWORD dwFlags);
  virtual WINBOOL EnumDisplaySettingsExW (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode, DWORD dwFlags);
  virtual WINBOOL EnumDisplayDevicesA (LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags);
  virtual WINBOOL EnumDisplayDevicesW (LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags);
  virtual LONG GetDisplayConfigBufferSizes (UINT32 flags, UINT32 * numPathArrayElements, UINT32 * numModeInfoArrayElements);
  virtual LONG SetDisplayConfig (UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, UINT32 flags);
  virtual LONG QueryDisplayConfig (UINT32 flags, UINT32 * numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 * numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID * currentTopologyId);
  virtual LONG DisplayConfigGetDeviceInfo (DISPLAYCONFIG_DEVICE_INFO_HEADER * requestPacket);
  virtual LONG DisplayConfigSetDeviceInfo (DISPLAYCONFIG_DEVICE_INFO_HEADER * setPacket);
  virtual WINBOOL SystemParametersInfoA (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
  virtual WINBOOL SystemParametersInfoW (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
  virtual VOID SetDebugErrorLevel (DWORD dwLevel);
  virtual VOID SetLastErrorEx (DWORD dwErrCode, DWORD dwType);
  virtual int InternalGetWindowText (HWND hWnd, LPWSTR pString, int cchMaxCount);
  virtual WINBOOL CancelShutdown (VOID);
  virtual HMONITOR MonitorFromPoint (POINT pt, DWORD dwFlags);
  virtual HMONITOR MonitorFromRect (LPCRECT lprc, DWORD dwFlags);
  virtual HMONITOR MonitorFromWindow (HWND hwnd, DWORD dwFlags);
  virtual WINBOOL EndTask (HWND hWnd, WINBOOL fShutDown, WINBOOL fForce);
  virtual WINBOOL SoundSentry (VOID);
  virtual WINBOOL GetMonitorInfoA (HMONITOR hMonitor, LPMONITORINFO lpmi);
  virtual WINBOOL GetMonitorInfoW (HMONITOR hMonitor, LPMONITORINFO lpmi);
  virtual WINBOOL EnumDisplayMonitors (HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
  virtual VOID NotifyWinEvent (DWORD event, HWND hwnd, LONG idObject, LONG idChild);
  virtual HWINEVENTHOOK SetWinEventHook (DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
  virtual WINBOOL IsWinEventHookInstalled (DWORD event);
  virtual WINBOOL UnhookWinEvent (HWINEVENTHOOK hWinEventHook);
  virtual WINBOOL GetGUIThreadInfo (DWORD idThread, PGUITHREADINFO pgui);
  virtual WINBOOL BlockInput (WINBOOL fBlockIt);
  virtual UINT GetWindowModuleFileNameA (HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax);
  virtual UINT GetWindowModuleFileNameW (HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax);
  virtual WINBOOL SetProcessDPIAware (VOID);
  virtual WINBOOL IsProcessDPIAware (VOID);
  virtual WINBOOL GetCursorInfo (PCURSORINFO pci);
  virtual WINBOOL GetWindowInfo (HWND hwnd, PWINDOWINFO pwi);
  virtual WINBOOL GetTitleBarInfo (HWND hwnd, PTITLEBARINFO pti);
  virtual WINBOOL GetMenuBarInfo (HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi);
  virtual WINBOOL GetScrollBarInfo (HWND hwnd, LONG idObject, PSCROLLBARINFO psbi);
  virtual WINBOOL GetComboBoxInfo (HWND hwndCombo, PCOMBOBOXINFO pcbi);
  virtual HWND GetAncestor (HWND hwnd, UINT gaFlags);
  virtual HWND RealChildWindowFromPoint (HWND hwndParent, POINT ptParentClientCoords);
  virtual UINT RealGetWindowClassA (HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax);
  virtual UINT RealGetWindowClassW (HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax);
  virtual WINBOOL GetAltTabInfoA (HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText);
  virtual WINBOOL GetAltTabInfoW (HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText);
  virtual DWORD GetListBoxInfo (HWND hwnd);
  virtual WINBOOL LockWorkStation (VOID);
  virtual WINBOOL UserHandleGrantAccess (HANDLE hUserHandle, HANDLE hJob, WINBOOL bGrant);
  virtual UINT GetRawInputData (HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);
  virtual UINT GetRawInputDeviceInfoA (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
  virtual UINT GetRawInputDeviceInfoW (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
  virtual UINT GetRawInputBuffer (PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);
  virtual WINBOOL RegisterRawInputDevices (PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
  virtual UINT GetRegisteredRawInputDevices (PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
  virtual UINT GetRawInputDeviceList (PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
  virtual LRESULT DefRawInputProc (PRAWINPUT * paRawInput, INT nInput, UINT cbSizeHeader);
  virtual WINBOOL GetPointerDevices (UINT32 * deviceCount, POINTER_DEVICE_INFO * pointerDevices);
  virtual WINBOOL GetPointerDevice (HANDLE device, POINTER_DEVICE_INFO * pointerDevice);
  virtual WINBOOL GetPointerDeviceProperties (HANDLE device, UINT32 * propertyCount, POINTER_DEVICE_PROPERTY * pointerProperties);
  virtual WINBOOL RegisterPointerDeviceNotifications (HWND window, WINBOOL notifyRange);
  virtual WINBOOL GetPointerDeviceRects (HANDLE device, RECT * pointerDeviceRect, RECT * displayRect);
  virtual WINBOOL GetPointerDeviceCursors (HANDLE device, UINT32 * cursorCount, POINTER_DEVICE_CURSOR_INFO * deviceCursors);
  virtual WINBOOL GetRawPointerDeviceData (UINT32 pointerId, UINT32 historyCount, UINT32 propertiesCount, POINTER_DEVICE_PROPERTY * pProperties, LONG * pValues);
  virtual WINBOOL ChangeWindowMessageFilter (UINT message, DWORD dwFlag);
  virtual WINBOOL ChangeWindowMessageFilterEx (HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);
  virtual WINBOOL GetGestureInfo (HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo);
  virtual WINBOOL GetGestureExtraArgs (HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs);
  virtual WINBOOL CloseGestureInfoHandle (HGESTUREINFO hGestureInfo);
  virtual WINBOOL SetGestureConfig (HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
  virtual WINBOOL GetGestureConfig (HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
  virtual WINBOOL ShutdownBlockReasonCreate (HWND hWnd, LPCWSTR pwszReason);
  virtual WINBOOL ShutdownBlockReasonQuery (HWND hWnd, LPWSTR pwszBuff, DWORD * pcchBuff);
  virtual WINBOOL ShutdownBlockReasonDestroy (HWND hWnd);
  virtual WINBOOL GetCurrentInputMessageSource (INPUT_MESSAGE_SOURCE * inputMessageSource);
  virtual WINBOOL GetCIMSSM (INPUT_MESSAGE_SOURCE * inputMessageSource);
  virtual WINBOOL GetAutoRotationState (PAR_STATE pState);
  virtual WINBOOL GetDisplayAutoRotationPreferences (ORIENTATION_PREFERENCE * pOrientation);
  virtual WINBOOL GetDisplayAutoRotationPreferencesByProcessId (DWORD dwProcessId, ORIENTATION_PREFERENCE * pOrientation, WINBOOL * fRotateScreen);
  virtual WINBOOL SetDisplayAutoRotationPreferences (ORIENTATION_PREFERENCE orientation);
  virtual WINBOOL IsImmersiveProcess (HANDLE hProcess);
  virtual WINBOOL SetProcessRestrictionExemption (WINBOOL fEnableExemption);
  virtual WINBOOL GetPointerInputTransform (UINT32 pointerId, UINT32 historyCount, UINT32 * inputTransform);
  virtual WINBOOL IsMousePointerEnabled (void);

  virtual UINT_PTR SetSystemTimer (HWND hwnd, UINT_PTR id, UINT timeout, void * unknown);
  virtual DWORD CalcMenuBar (HWND hwnd, DWORD left, DWORD right, DWORD top, RECT * rect);
  virtual UINT WINNLSGetIMEHotkey (HWND hwnd);
  virtual HWND GetTaskmanWindow (void);
  virtual BOOL DdeDisconnect (HCONV hConv);
  virtual HSZ DdeCreateStringHandleA (DWORD idInst, LPCSTR psz, INT codepage);
  virtual BOOL SetProcessDpiAwarenessInternal (DPI_AWARENESS awareness);
  virtual BOOL SetDeskWallpaper (const char * filename);
  virtual NTSTATUS User32ImmTranslateMessage (void * args, ULONG size);
  virtual DWORD DdeGetData (HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
  virtual DWORD_PTR SetSysColorsTemp (const COLORREF * pPens, const HBRUSH * pBrushes, DWORD_PTR n);
  virtual LRESULT StaticWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LPBYTE DdeAccessData (HDDEDATA hData, LPDWORD pcbDataSize);
  virtual BOOL DdeUnaccessData (HDDEDATA hData);
  virtual UINT DdeInitializeA (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
  virtual UINT DdeInitializeW (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
  virtual BOOL DdeUninitialize (DWORD idInst);
  virtual VOID LoadLocalFonts (VOID);
  virtual LPSTR CharPrevExW (WORD codepage, LPCWSTR start, LPCWSTR ptr, DWORD flags);
  virtual HWND GetProgmanWindow (void);
  virtual DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext (DPI_AWARENESS_CONTEXT context);
  virtual LPARAM PackDDElParam (UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
  virtual BOOL DdeFreeDataHandle (HDDEDATA hData);
  virtual BOOL AlignRects (LPRECT rect, DWORD b, DWORD c, DWORD d);
  virtual DWORD DdeQueryStringW (DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, INT iCodePage);
  virtual DWORD SetLogonNotifyWindow (HWINSTA hwinsta, HWND hwnd);
  virtual HCURSOR GetCursorFrameInfo (HCURSOR handle, DWORD reserved, DWORD istep, DWORD * rate, DWORD * steps);
  virtual DWORD DdeQueryStringA (DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, INT iCodePage);
  virtual BOOL DdeSetQualityOfService (HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE * pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev);
  virtual UINT DdeGetLastError (DWORD idInst);
  virtual LRESULT ComboWndProcA (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
  virtual BOOL DdeDisconnectList (HCONVLIST hConvList);
  virtual LRESULT SendIMEMessageExA (HWND hwnd, LPARAM lparam);
  virtual INT DdeCmpStringHandles (HSZ hsz1, HSZ hsz2);
  virtual DWORD RegisterTasklist (DWORD x);
  virtual LRESULT IconTitleWndProc (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT SendIMEMessageExW (HWND hwnd, LPARAM lparam);
  virtual LRESULT ComboWndProcW (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
  virtual HCONVLIST DdeConnectList (DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC);
  virtual HCONV DdeQueryNextServer (HCONVLIST hConvList, HCONV hConvPrev);
  virtual BOOL RegisterUserApiHook (const struct user_api_hook * new_hook, struct user_api_hook * old_hook);
  virtual void UnregisterUserApiHook (void);
  virtual LRESULT StaticWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT MDIClientWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual BOOL DdeKeepStringHandle (DWORD idInst, HSZ hsz);
  virtual DWORD GetAppCompatFlags (HTASK hTask);
  virtual HWND SetProgmanWindow (HWND hwnd);
  virtual BOOL DdeEnableCallback (DWORD idInst, HCONV hConv, UINT wCmd);
  virtual DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior (void);
  virtual LRESULT MDIClientWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT EditWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT ButtonWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual HWND SetTaskmanWindow (HWND hwnd);
  virtual BOOL DdeImpersonateClient (HCONV hConv);
  virtual UINT DdeQueryConvInfo (HCONV hConv, DWORD id, PCONVINFO lpConvInfo);
  virtual void CalcChildScroll (HWND hwnd, INT scroll);
  virtual HCONV DdeConnect (DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC);
  virtual HCONV DdeReconnect (HCONV hConv);
  virtual LPWSTR CharNextExW (WORD codepage, LPCWSTR ptr, DWORD flags);
  virtual LRESULT EditWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual BOOL GetProcessDpiAwarenessInternal (HANDLE process, DPI_AWARENESS * awareness);
  virtual void RegisterSystemThread (DWORD flags, DWORD reserved);
  virtual BOOL SetWindowCompositionAttribute (HWND hwnd, WINDOWCOMPOSITIONATTRIBDATA const * pwcad);
  virtual HDDEDATA DdeClientTransaction (LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult);
  virtual BOOL DdeAbandonTransaction (DWORD idInst, HCONV hConv, DWORD idTransaction);
  virtual LRESULT ScrollBarWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual HKL LoadKeyboardLayoutEx (HKL layout, const WCHAR * name, UINT flags);
  virtual int RegisterServicesProcess (DWORD ServicesProcessId);
  virtual HDDEDATA DdeCreateDataHandle (DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
  virtual HDDEDATA DdeAddData (HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
  virtual LRESULT ScrollBarWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual HDDEDATA DdeNameService (DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);
  virtual LRESULT ButtonWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual INT GetSystemMetricsForDpi (INT index, UINT dpi);
  virtual DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior (HWND hwnd);
  virtual DWORD SetWindowStationUser (DWORD x1, DWORD x2);
  virtual BOOL SystemParametersInfoForDpi (UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi);
  virtual LRESULT MessageWndProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
  virtual BOOL IsWindowRedirectedForPrint (HWND hwnd);
  virtual BOOL WINNLSGetEnableStatus (HWND hwnd);
  virtual BOOL KillSystemTimer (HWND hwnd, UINT_PTR id);
  virtual HSZ DdeCreateStringHandleW (DWORD idInst, LPCWSTR psz, INT codepage);
  virtual INT_PTR MDI_MoreWindowsDlgProc (HWND hDlg, UINT iMsg, WPARAM wParam, LPARAM lParam);
  virtual BOOL WINNLSEnableIME (HWND hwnd, BOOL enable);
  virtual BOOL AdjustWindowRectExForDpi (LPRECT rect, DWORD style, BOOL menu, DWORD dwExStyle, UINT dpi);
  virtual DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext (void);
  virtual BOOL DdeFreeStringHandle (DWORD idInst, HSZ hsz);
  virtual BOOL DrawCaptionTempA (HWND hwnd, HDC hdc, const RECT * rect, HFONT hFont, HICON hIcon, LPCSTR str, UINT uFlags);
  virtual WORD TileChildWindows (HWND parent, UINT flags);
  virtual LPARAM ReuseDDElParam (LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);
  virtual BOOL ImpersonateDdeClientWindow (HWND hWndClient, HWND hWndServer);
  virtual UINT GetDpiForSystem (void);
  virtual BOOL User32InitializeImmEntryTable (DWORD magic);
  virtual BOOL EnableNonClientDpiScaling (HWND hwnd);
  virtual BOOL ImmSetActiveContext (HWND, HIMC, BOOL);
  virtual BOOL IsValidDpiAwarenessContext (DPI_AWARENESS_CONTEXT context);
  virtual void ScrollChildren (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  virtual WORD CascadeChildWindows (HWND parent, UINT flags);
  virtual DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext (HWND hwnd);
  virtual HDEVNOTIFY I_ScRegisterDeviceNotification (DEVICE_NOTIFICATION_DETAILS * details, LPVOID filter, DWORD flags);
  virtual BOOL I_ScUnregisterDeviceNotification (HDEVNOTIFY handle);
  virtual BOOL DdeSetUserHandle (HCONV hConv, DWORD id, DWORD hUser);
  virtual BOOL DdePostAdvise (DWORD idInst, HSZ hszTopic, HSZ hszItem);
  virtual DWORD GetAppCompatFlags2 (HTASK hTask);
  virtual BOOL AreDpiAwarenessContextsEqual (DPI_AWARENESS_CONTEXT ctx1, DPI_AWARENESS_CONTEXT ctx2);
  virtual DPI_AWARENESS GetAwarenessFromDpiAwarenessContext (DPI_AWARENESS_CONTEXT context);
  virtual BOOL SetShellWindow (HWND hwnd);
  virtual LRESULT ImeWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual UINT GetDpiForWindow (HWND hwnd);
  virtual BOOL UnpackDDElParam (UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
  virtual BOOL FreeDDElParam (UINT msg, LPARAM lParam);
  virtual void UserRegisterWowHandlers (const struct wow_handlers16 * new_, struct wow_handlers32 * orig);
  virtual LRESULT ImeWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT ListBoxWndProcW (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual LRESULT ListBoxWndProcA (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  virtual DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior (DPI_HOSTING_BEHAVIOR value);
  virtual DWORD RegisterLogonProcess (HANDLE hprocess, BOOL x);

  APIUser32(std::string const & dllPath="");
  virtual ~APIUser32() =default;

private:
  FARPROC GetProcAddress_(HMODULE hModule, LPCSTR lpProcName);

  int WINAPI (*wvsprintfA_) (LPSTR, LPCSTR, va_list arglist);
  int WINAPI (*wvsprintfW_) (LPWSTR, LPCWSTR, va_list arglist);
  HKL WINAPI (*LoadKeyboardLayoutA_) (LPCSTR pwszKLID, UINT Flags);
  HKL WINAPI (*LoadKeyboardLayoutW_) (LPCWSTR pwszKLID, UINT Flags);
  HKL WINAPI (*ActivateKeyboardLayout_) (HKL hkl, UINT Flags);
  int WINAPI (*ToUnicodeEx_) (UINT wVirtKey, UINT wScanCode, CONST BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
  WINBOOL WINAPI (*UnloadKeyboardLayout_) (HKL hkl);
  WINBOOL WINAPI (*GetKeyboardLayoutNameA_) (LPSTR pwszKLID);
  WINBOOL WINAPI (*GetKeyboardLayoutNameW_) (LPWSTR pwszKLID);
  int WINAPI (*GetKeyboardLayoutList_) (int nBuff, HKL * lpList);
  HKL WINAPI (*GetKeyboardLayout_) (DWORD idThread);
  int WINAPI (*GetMouseMovePointsEx_) (UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution);
  HDESK WINAPI (*CreateDesktopA_) (LPCSTR lpszDesktop, LPCSTR lpszDevice, LPDEVMODEA pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  HDESK WINAPI (*CreateDesktopW_) (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, LPDEVMODEW pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  HDESK WINAPI (*CreateDesktopExA_) (LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
  HDESK WINAPI (*CreateDesktopExW_) (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
  HDESK WINAPI (*OpenDesktopA_) (LPCSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  HDESK WINAPI (*OpenDesktopW_) (LPCWSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  HDESK WINAPI (*OpenInputDesktop_) (DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  WINBOOL WINAPI (*EnumDesktopsA_) (HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);
  WINBOOL WINAPI (*EnumDesktopsW_) (HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam);
  WINBOOL WINAPI (*EnumDesktopWindows_) (HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
  WINBOOL WINAPI (*SwitchDesktop_) (HDESK hDesktop);
  WINBOOL WINAPI (*SetThreadDesktop_) (HDESK hDesktop);
  WINBOOL WINAPI (*CloseDesktop_) (HDESK hDesktop);
  HDESK WINAPI (*GetThreadDesktop_) (DWORD dwThreadId);
  HWINSTA WINAPI (*CreateWindowStationA_) (LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  HWINSTA WINAPI (*CreateWindowStationW_) (LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  HWINSTA WINAPI (*OpenWindowStationA_) (LPCSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  HWINSTA WINAPI (*OpenWindowStationW_) (LPCWSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
  WINBOOL WINAPI (*EnumWindowStationsA_) (WINSTAENUMPROCA lpEnumFunc, LPARAM lParam);
  WINBOOL WINAPI (*EnumWindowStationsW_) (WINSTAENUMPROCW lpEnumFunc, LPARAM lParam);
  WINBOOL WINAPI (*CloseWindowStation_) (HWINSTA hWinSta);
  WINBOOL WINAPI (*SetProcessWindowStation_) (HWINSTA hWinSta);
  HWINSTA WINAPI (*GetProcessWindowStation_) (VOID);
  WINBOOL WINAPI (*SetUserObjectSecurity_) (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
  WINBOOL WINAPI (*GetUserObjectSecurity_) (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);
  WINBOOL WINAPI (*GetUserObjectInformationA_) (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
  WINBOOL WINAPI (*GetUserObjectInformationW_) (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
  WINBOOL WINAPI (*SetUserObjectInformationA_) (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
  WINBOOL WINAPI (*SetUserObjectInformationW_) (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
  WINBOOL WINAPI (*IsHungAppWindow_) (HWND hwnd);
  VOID WINAPI (*DisableProcessWindowsGhosting_) (VOID);
  UINT WINAPI (*RegisterWindowMessageA_) (LPCSTR lpString);
  UINT WINAPI (*RegisterWindowMessageW_) (LPCWSTR lpString);
  WINBOOL WINAPI (*TrackMouseEvent_) (LPTRACKMOUSEEVENT lpEventTrack);
  WINBOOL WINAPI (*DrawEdge_) (HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);
  WINBOOL WINAPI (*DrawFrameControl_) (HDC, LPRECT, UINT, UINT);
  WINBOOL WINAPI (*DrawCaption_) (HWND hwnd, HDC hdc, CONST RECT * lprect, UINT flags);
  WINBOOL WINAPI (*DrawAnimatedRects_) (HWND hwnd, int idAni, CONST RECT * lprcFrom, CONST RECT * lprcTo);
  WINBOOL WINAPI (*GetMessageA_) (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
  WINBOOL WINAPI (*GetMessageW_) (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
  WINBOOL WINAPI (*TranslateMessage_) (CONST MSG * lpMsg);
  LRESULT WINAPI (*DispatchMessageA_) (CONST MSG * lpMsg);
  LRESULT WINAPI (*DispatchMessageW_) (CONST MSG * lpMsg);
  WINBOOL WINAPI (*SetMessageQueue_) (int cMessagesMax);
  WINBOOL WINAPI (*PeekMessageA_) (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
  WINBOOL WINAPI (*PeekMessageW_) (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
  WINBOOL WINAPI (*RegisterHotKey_) (HWND hWnd, int id, UINT fsModifiers, UINT vk);
  WINBOOL WINAPI (*UnregisterHotKey_) (HWND hWnd, int id);
  WINBOOL WINAPI (*ExitWindowsEx_) (UINT uFlags, DWORD dwReason);
  WINBOOL WINAPI (*SwapMouseButton_) (WINBOOL fSwap);
  DWORD WINAPI (*GetMessagePos_) (VOID);
  LONG WINAPI (*GetMessageTime_) (VOID);
  LPARAM WINAPI (*GetMessageExtraInfo_) (VOID);
  DWORD WINAPI (*GetUnpredictedMessagePos_) (VOID);
  WINBOOL WINAPI (*IsWow64Message_) (VOID);
  LPARAM WINAPI (*SetMessageExtraInfo_) (LPARAM lParam);
  LRESULT WINAPI (*SendMessageA_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*SendMessageW_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*SendMessageTimeoutA_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
  LRESULT WINAPI (*SendMessageTimeoutW_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
  WINBOOL WINAPI (*SendNotifyMessageA_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*SendNotifyMessageW_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*SendMessageCallbackA_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
  WINBOOL WINAPI (*SendMessageCallbackW_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
  LONG WINAPI (*BroadcastSystemMessageExA_) (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
  LONG WINAPI (*BroadcastSystemMessageExW_) (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
  LONG WINAPI (*BroadcastSystemMessageA_) (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
  LONG WINAPI (*BroadcastSystemMessageW_) (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
  HPOWERNOTIFY WINAPI (*RegisterPowerSettingNotification_) (HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);
  WINBOOL WINAPI (*UnregisterPowerSettingNotification_) (HPOWERNOTIFY Handle);
  HPOWERNOTIFY WINAPI (*RegisterSuspendResumeNotification_) (HANDLE hRecipient, DWORD Flags);
  WINBOOL WINAPI (*UnregisterSuspendResumeNotification_) (HPOWERNOTIFY Handle);
  WINBOOL WINAPI (*PostMessageA_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*PostMessageW_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*PostThreadMessageA_) (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*PostThreadMessageW_) (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*AttachThreadInput_) (DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach);
  WINBOOL WINAPI (*ReplyMessage_) (LRESULT lResult);
  WINBOOL WINAPI (*WaitMessage_) (VOID);
  DWORD WINAPI (*WaitForInputIdle_) (HANDLE hProcess, DWORD dwMilliseconds);
  LRESULT WINAPI (*DefWindowProcA_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*DefWindowProcW_) (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  VOID WINAPI (*PostQuitMessage_) (int nExitCode);
  WINBOOL WINAPI (*InSendMessage_) (VOID);
  DWORD WINAPI (*InSendMessageEx_) (LPVOID lpReserved);
  UINT WINAPI (*GetDoubleClickTime_) (VOID);
  WINBOOL WINAPI (*SetDoubleClickTime_) (UINT);
  ATOM WINAPI (*RegisterClassA_) (CONST WNDCLASSA * lpWndClass);
  ATOM WINAPI (*RegisterClassW_) (CONST WNDCLASSW * lpWndClass);
  WINBOOL WINAPI (*UnregisterClassA_) (LPCSTR lpClassName, HINSTANCE hInstance);
  WINBOOL WINAPI (*UnregisterClassW_) (LPCWSTR lpClassName, HINSTANCE hInstance);
  WINBOOL WINAPI (*GetClassInfoA_) (HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
  WINBOOL WINAPI (*GetClassInfoW_) (HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
  ATOM WINAPI (*RegisterClassExA_) (CONST WNDCLASSEXA *);
  ATOM WINAPI (*RegisterClassExW_) (CONST WNDCLASSEXW *);
  WINBOOL WINAPI (*GetClassInfoExA_) (HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
  WINBOOL WINAPI (*GetClassInfoExW_) (HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);
#ifdef STRICT
  LRESULT WINAPI (*CallWindowProcA_) (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*CallWindowProcW_) (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
#else
  LRESULT WINAPI (*CallWindowProcA_) (FARPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*CallWindowProcW_) (FARPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
#endif
  HDEVNOTIFY WINAPI (*RegisterDeviceNotificationA_) (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
  HDEVNOTIFY WINAPI (*RegisterDeviceNotificationW_) (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
  WINBOOL WINAPI (*UnregisterDeviceNotification_) (HDEVNOTIFY Handle);
  HWND WINAPI (*CreateWindowExA_) (DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
  HWND WINAPI (*CreateWindowExW_) (DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
  WINBOOL WINAPI (*IsWindow_) (HWND hWnd);
  WINBOOL WINAPI (*IsMenu_) (HMENU hMenu);
  WINBOOL WINAPI (*IsChild_) (HWND hWndParent, HWND hWnd);
  WINBOOL WINAPI (*DestroyWindow_) (HWND hWnd);
  WINBOOL WINAPI (*ShowWindow_) (HWND hWnd, int nCmdShow);
  WINBOOL WINAPI (*AnimateWindow_) (HWND hWnd, DWORD dwTime, DWORD dwFlags);
  WINBOOL WINAPI (*UpdateLayeredWindow_) (HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags);
  WINBOOL WINAPI (*UpdateLayeredWindowIndirect_) (HWND hWnd, const UPDATELAYEREDWINDOWINFO * pULWInfo);
  WINBOOL WINAPI (*GetLayeredWindowAttributes_) (HWND hwnd, COLORREF * pcrKey, BYTE * pbAlpha, DWORD * pdwFlags);
  WINBOOL WINAPI (*PrintWindow_) (HWND hwnd, HDC hdcBlt, UINT nFlags);
  WINBOOL WINAPI (*SetLayeredWindowAttributes_) (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
  WINBOOL WINAPI (*ShowWindowAsync_) (HWND hWnd, int nCmdShow);
  WINBOOL WINAPI (*FlashWindow_) (HWND hWnd, WINBOOL bInvert);
  WINBOOL WINAPI (*FlashWindowEx_) (PFLASHWINFO pfwi);
  WINBOOL WINAPI (*ShowOwnedPopups_) (HWND hWnd, WINBOOL fShow);
  WINBOOL WINAPI (*OpenIcon_) (HWND hWnd);
  WINBOOL WINAPI (*CloseWindow_) (HWND hWnd);
  WINBOOL WINAPI (*MoveWindow_) (HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint);
  WINBOOL WINAPI (*SetWindowPos_) (HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
  WINBOOL WINAPI (*GetWindowPlacement_) (HWND hWnd, WINDOWPLACEMENT * lpwndpl);
  WINBOOL WINAPI (*SetWindowPlacement_) (HWND hWnd, CONST WINDOWPLACEMENT * lpwndpl);
  WINBOOL WINAPI (*GetWindowDisplayAffinity_) (HWND hWnd, DWORD * pdwAffinity);
  WINBOOL WINAPI (*SetWindowDisplayAffinity_) (HWND hWnd, DWORD dwAffinity);
  HDWP WINAPI (*BeginDeferWindowPos_) (int nNumWindows);
  HDWP WINAPI (*DeferWindowPos_) (HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
  WINBOOL WINAPI (*EndDeferWindowPos_) (HDWP hWinPosInfo);
  WINBOOL WINAPI (*IsWindowVisible_) (HWND hWnd);
  WINBOOL WINAPI (*IsIconic_) (HWND hWnd);
  WINBOOL WINAPI (*AnyPopup_) (VOID);
  WINBOOL WINAPI (*BringWindowToTop_) (HWND hWnd);
  WINBOOL WINAPI (*IsZoomed_) (HWND hWnd);
  HWND WINAPI (*CreateDialogParamA_) (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  HWND WINAPI (*CreateDialogParamW_) (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  HWND WINAPI (*CreateDialogIndirectParamA_) (HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  HWND WINAPI (*CreateDialogIndirectParamW_) (HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  INT_PTR WINAPI (*DialogBoxParamA_) (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  INT_PTR WINAPI (*DialogBoxParamW_) (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  INT_PTR WINAPI (*DialogBoxIndirectParamA_) (HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  INT_PTR WINAPI (*DialogBoxIndirectParamW_) (HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  WINBOOL WINAPI (*EndDialog_) (HWND hDlg, INT_PTR nResult);
  HWND WINAPI (*GetDlgItem_) (HWND hDlg, int nIDDlgItem);
  WINBOOL WINAPI (*SetDlgItemInt_) (HWND hDlg, int nIDDlgItem, UINT uValue, WINBOOL bSigned);
  UINT WINAPI (*GetDlgItemInt_) (HWND hDlg, int nIDDlgItem, WINBOOL * lpTranslated, WINBOOL bSigned);
  WINBOOL WINAPI (*SetDlgItemTextA_) (HWND hDlg, int nIDDlgItem, LPCSTR lpString);
  WINBOOL WINAPI (*SetDlgItemTextW_) (HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
  UINT WINAPI (*GetDlgItemTextA_) (HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax);
  UINT WINAPI (*GetDlgItemTextW_) (HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax);
  WINBOOL WINAPI (*CheckDlgButton_) (HWND hDlg, int nIDButton, UINT uCheck);
  WINBOOL WINAPI (*CheckRadioButton_) (HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
  UINT WINAPI (*IsDlgButtonChecked_) (HWND hDlg, int nIDButton);
  LRESULT WINAPI (*SendDlgItemMessageA_) (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*SendDlgItemMessageW_) (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
  HWND WINAPI (*GetNextDlgGroupItem_) (HWND hDlg, HWND hCtl, WINBOOL bPrevious);
  HWND WINAPI (*GetNextDlgTabItem_) (HWND hDlg, HWND hCtl, WINBOOL bPrevious);
  int WINAPI (*GetDlgCtrlID_) (HWND hWnd);
  LONG WINAPI (*GetDialogBaseUnits_) (VOID);
  LRESULT WINAPI (*DefDlgProcA_) (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*DefDlgProcW_) (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*CallMsgFilterA_) (LPMSG lpMsg, int nCode);
  WINBOOL WINAPI (*CallMsgFilterW_) (LPMSG lpMsg, int nCode);
  WINBOOL WINAPI (*OpenClipboard_) (HWND hWndNewOwner);
  WINBOOL WINAPI (*CloseClipboard_) (VOID);
  DWORD WINAPI (*GetClipboardSequenceNumber_) (VOID);
  HWND WINAPI (*GetClipboardOwner_) (VOID);
  HWND WINAPI (*SetClipboardViewer_) (HWND hWndNewViewer);
  HWND WINAPI (*GetClipboardViewer_) (VOID);
  WINBOOL WINAPI (*ChangeClipboardChain_) (HWND hWndRemove, HWND hWndNewNext);
  HANDLE WINAPI (*SetClipboardData_) (UINT uFormat, HANDLE hMem);
  HANDLE WINAPI (*GetClipboardData_) (UINT uFormat);
  UINT WINAPI (*RegisterClipboardFormatA_) (LPCSTR lpszFormat);
  UINT WINAPI (*RegisterClipboardFormatW_) (LPCWSTR lpszFormat);
  int WINAPI (*CountClipboardFormats_) (VOID);
  UINT WINAPI (*EnumClipboardFormats_) (UINT format);
  int WINAPI (*GetClipboardFormatNameA_) (UINT format, LPSTR lpszFormatName, int cchMaxCount);
  int WINAPI (*GetClipboardFormatNameW_) (UINT format, LPWSTR lpszFormatName, int cchMaxCount);
  WINBOOL WINAPI (*EmptyClipboard_) (VOID);
  WINBOOL WINAPI (*IsClipboardFormatAvailable_) (UINT format);
  int WINAPI (*GetPriorityClipboardFormat_) (UINT * paFormatPriorityList, int cFormats);
  HWND WINAPI (*GetOpenClipboardWindow_) (VOID);
  WINBOOL WINAPI (*AddClipboardFormatListener_) (HWND hwnd);
  WINBOOL WINAPI (*RemoveClipboardFormatListener_) (HWND hwnd);
  WINBOOL WINAPI (*GetUpdatedClipboardFormats_) (PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut);
  WINBOOL WINAPI (*CharToOemA_) (LPCSTR lpszSrc, LPSTR lpszDst);
  WINBOOL WINAPI (*CharToOemW_) (LPCWSTR lpszSrc, LPSTR lpszDst);
  WINBOOL WINAPI (*OemToCharA_) (LPCSTR lpszSrc, LPSTR lpszDst);
  WINBOOL WINAPI (*OemToCharW_) (LPCSTR lpszSrc, LPWSTR lpszDst);
  WINBOOL WINAPI (*CharToOemBuffA_) (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  WINBOOL WINAPI (*CharToOemBuffW_) (LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  WINBOOL WINAPI (*OemToCharBuffA_) (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  WINBOOL WINAPI (*OemToCharBuffW_) (LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength);
  LPSTR WINAPI (*CharUpperA_) (LPSTR lpsz);
  LPWSTR WINAPI (*CharUpperW_) (LPWSTR lpsz);
  DWORD WINAPI (*CharUpperBuffA_) (LPSTR lpsz, DWORD cchLength);
  DWORD WINAPI (*CharUpperBuffW_) (LPWSTR lpsz, DWORD cchLength);
  LPSTR WINAPI (*CharLowerA_) (LPSTR lpsz);
  LPWSTR WINAPI (*CharLowerW_) (LPWSTR lpsz);
  DWORD WINAPI (*CharLowerBuffA_) (LPSTR lpsz, DWORD cchLength);
  DWORD WINAPI (*CharLowerBuffW_) (LPWSTR lpsz, DWORD cchLength);
  LPSTR WINAPI (*CharNextA_) (LPCSTR lpsz);
  LPWSTR WINAPI (*CharNextW_) (LPCWSTR lpsz);
  LPSTR WINAPI (*CharPrevA_) (LPCSTR lpszStart, LPCSTR lpszCurrent);
  LPWSTR WINAPI (*CharPrevW_) (LPCWSTR lpszStart, LPCWSTR lpszCurrent);
  LPSTR WINAPI (*CharNextExA_) (WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);
  LPSTR WINAPI (*CharPrevExA_) (WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);
  WINBOOL WINAPI (*IsCharAlphaA_) (CHAR ch);
  WINBOOL WINAPI (*IsCharAlphaW_) (WCHAR ch);
  WINBOOL WINAPI (*IsCharAlphaNumericA_) (CHAR ch);
  WINBOOL WINAPI (*IsCharAlphaNumericW_) (WCHAR ch);
  WINBOOL WINAPI (*IsCharUpperA_) (CHAR ch);
  WINBOOL WINAPI (*IsCharUpperW_) (WCHAR ch);
  WINBOOL WINAPI (*IsCharLowerA_) (CHAR ch);
  WINBOOL WINAPI (*IsCharLowerW_) (WCHAR ch);
  HWND WINAPI (*SetFocus_) (HWND hWnd);
  HWND WINAPI (*GetActiveWindow_) (VOID);
  HWND WINAPI (*GetFocus_) (VOID);
  UINT WINAPI (*GetKBCodePage_) (VOID);
  SHORT WINAPI (*GetKeyState_) (int nVirtKey);
  SHORT WINAPI (*GetAsyncKeyState_) (int vKey);
  WINBOOL WINAPI (*GetKeyboardState_) (PBYTE lpKeyState);
  WINBOOL WINAPI (*SetKeyboardState_) (LPBYTE lpKeyState);
  int WINAPI (*GetKeyNameTextA_) (LONG lParam, LPSTR lpString, int cchSize);
  int WINAPI (*GetKeyNameTextW_) (LONG lParam, LPWSTR lpString, int cchSize);
  int WINAPI (*GetKeyboardType_) (int nTypeFlag);
  int WINAPI (*ToAscii_) (UINT uVirtKey, UINT uScanCode, CONST BYTE * lpKeyState, LPWORD lpChar, UINT uFlags);
  int WINAPI (*ToAsciiEx_) (UINT uVirtKey, UINT uScanCode, CONST BYTE * lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
  int WINAPI (*ToUnicode_) (UINT wVirtKey, UINT wScanCode, CONST BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
  DWORD WINAPI (*OemKeyScan_) (WORD wOemChar);
  SHORT WINAPI (*VkKeyScanA_) (CHAR ch);
  SHORT WINAPI (*VkKeyScanW_) (WCHAR ch);
  SHORT WINAPI (*VkKeyScanExA_) (CHAR ch, HKL dwhkl);
  SHORT WINAPI (*VkKeyScanExW_) (WCHAR ch, HKL dwhkl);
  VOID WINAPI (*keybd_event_) (BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);
  VOID WINAPI (*mouse_event_) (DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
  UINT WINAPI (*SendInput_) (UINT cInputs, LPINPUT pInputs, int cbSize);
  WINBOOL WINAPI (*GetTouchInputInfo_) (HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);
  WINBOOL WINAPI (*CloseTouchInputHandle_) (HTOUCHINPUT hTouchInput);
  WINBOOL WINAPI (*RegisterTouchWindow_) (HWND hwnd, ULONG ulFlags);
  WINBOOL WINAPI (*UnregisterTouchWindow_) (HWND hwnd);
  WINBOOL WINAPI (*IsTouchWindow_) (HWND hwnd, PULONG pulFlags);
  WINBOOL WINAPI (*InitializeTouchInjection_) (UINT32 maxCount, DWORD dwMode);
  WINBOOL WINAPI (*InjectTouchInput_) (UINT32 count, CONST POINTER_TOUCH_INFO * contacts);
  WINBOOL WINAPI (*GetPointerType_) (UINT32 pointerId, POINTER_INPUT_TYPE * pointerType);
  WINBOOL WINAPI (*GetPointerCursorId_) (UINT32 pointerId, UINT32 * cursorId);
  WINBOOL WINAPI (*GetPointerInfo_) (UINT32 pointerId, POINTER_INFO * pointerInfo);
  WINBOOL WINAPI (*GetPointerInfoHistory_) (UINT32 pointerId, UINT32 * entriesCount, POINTER_INFO * pointerInfo);
  WINBOOL WINAPI (*GetPointerFrameInfo_) (UINT32 pointerId, UINT32 * pointerCount, POINTER_INFO * pointerInfo);
  WINBOOL WINAPI (*GetPointerFrameInfoHistory_) (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_INFO * pointerInfo);
  WINBOOL WINAPI (*GetPointerTouchInfo_) (UINT32 pointerId, POINTER_TOUCH_INFO * touchInfo);
  WINBOOL WINAPI (*GetPointerTouchInfoHistory_) (UINT32 pointerId, UINT32 * entriesCount, POINTER_TOUCH_INFO * touchInfo);
  WINBOOL WINAPI (*GetPointerFrameTouchInfo_) (UINT32 pointerId, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo);
  WINBOOL WINAPI (*GetPointerFrameTouchInfoHistory_) (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo);
  WINBOOL WINAPI (*GetPointerPenInfo_) (UINT32 pointerId, POINTER_PEN_INFO * penInfo);
  WINBOOL WINAPI (*GetPointerPenInfoHistory_) (UINT32 pointerId, UINT32 * entriesCount, POINTER_PEN_INFO * penInfo);
  WINBOOL WINAPI (*GetPointerFramePenInfo_) (UINT32 pointerId, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo);
  WINBOOL WINAPI (*GetPointerFramePenInfoHistory_) (UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo);
  WINBOOL WINAPI (*SkipPointerFrameMessages_) (UINT32 pointerId);
  WINBOOL WINAPI (*RegisterPointerInputTarget_) (HWND hwnd, POINTER_INPUT_TYPE pointerType);
  WINBOOL WINAPI (*UnregisterPointerInputTarget_) (HWND hwnd, POINTER_INPUT_TYPE pointerType);
  WINBOOL WINAPI (*EnableMouseInPointer_) (WINBOOL fEnable);
  WINBOOL WINAPI (*IsMouseInPointerEnabled_) (VOID);
  WINBOOL WINAPI (*RegisterTouchHitTestingWindow_) (HWND hwnd, ULONG value);
  WINBOOL WINAPI (*EvaluateProximityToRect_) (const RECT * controlBoundingBox, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval);
  WINBOOL WINAPI (*EvaluateProximityToPolygon_) (UINT32 numVertices, const POINT * controlPolygon, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval);
  LRESULT WINAPI (*PackTouchHitTestingProximityEvaluation_) (const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval);
  WINBOOL WINAPI (*GetWindowFeedbackSetting_) (HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 * pSize, VOID * config);
  WINBOOL WINAPI (*SetWindowFeedbackSetting_) (HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 size, CONST VOID * configuration);
  WINBOOL WINAPI (*GetLastInputInfo_) (PLASTINPUTINFO plii);
  UINT WINAPI (*MapVirtualKeyA_) (UINT uCode, UINT uMapType);
  UINT WINAPI (*MapVirtualKeyW_) (UINT uCode, UINT uMapType);
  UINT WINAPI (*MapVirtualKeyExA_) (UINT uCode, UINT uMapType, HKL dwhkl);
  UINT WINAPI (*MapVirtualKeyExW_) (UINT uCode, UINT uMapType, HKL dwhkl);
  WINBOOL WINAPI (*GetInputState_) (VOID);
  DWORD WINAPI (*GetQueueStatus_) (UINT flags);
  HWND WINAPI (*GetCapture_) (VOID);
  HWND WINAPI (*SetCapture_) (HWND hWnd);
  WINBOOL WINAPI (*ReleaseCapture_) (VOID);
  DWORD WINAPI (*MsgWaitForMultipleObjects_) (DWORD nCount, CONST HANDLE * pHandles, WINBOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
  DWORD WINAPI (*MsgWaitForMultipleObjectsEx_) (DWORD nCount, CONST HANDLE * pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);
  UINT_PTR WINAPI (*SetTimer_) (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
  WINBOOL WINAPI (*KillTimer_) (HWND hWnd, UINT_PTR uIDEvent);
  WINBOOL WINAPI (*IsWindowUnicode_) (HWND hWnd);
  WINBOOL WINAPI (*EnableWindow_) (HWND hWnd, WINBOOL bEnable);
  WINBOOL WINAPI (*IsWindowEnabled_) (HWND hWnd);
  HACCEL WINAPI (*LoadAcceleratorsA_) (HINSTANCE hInstance, LPCSTR lpTableName);
  HACCEL WINAPI (*LoadAcceleratorsW_) (HINSTANCE hInstance, LPCWSTR lpTableName);
  HACCEL WINAPI (*CreateAcceleratorTableA_) (LPACCEL paccel, int cAccel);
  HACCEL WINAPI (*CreateAcceleratorTableW_) (LPACCEL paccel, int cAccel);
  WINBOOL WINAPI (*DestroyAcceleratorTable_) (HACCEL hAccel);
  int WINAPI (*CopyAcceleratorTableA_) (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
  int WINAPI (*CopyAcceleratorTableW_) (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
  int WINAPI (*TranslateAcceleratorA_) (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
  int WINAPI (*TranslateAcceleratorW_) (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
  UINT_PTR WINAPI (*SetCoalescableTimer_) (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc, ULONG uToleranceDelay);
  int WINAPI (*GetSystemMetrics_) (int nIndex);
  HMENU WINAPI (*LoadMenuA_) (HINSTANCE hInstance, LPCSTR lpMenuName);
  HMENU WINAPI (*LoadMenuW_) (HINSTANCE hInstance, LPCWSTR lpMenuName);
  HMENU WINAPI (*LoadMenuIndirectA_) (CONST MENUTEMPLATEA * lpMenuTemplate);
  HMENU WINAPI (*LoadMenuIndirectW_) (CONST MENUTEMPLATEW * lpMenuTemplate);
  HMENU WINAPI (*GetMenu_) (HWND hWnd);
  WINBOOL WINAPI (*SetMenu_) (HWND hWnd, HMENU hMenu);
  WINBOOL WINAPI (*ChangeMenuA_) (HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags);
  WINBOOL WINAPI (*ChangeMenuW_) (HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags);
  WINBOOL WINAPI (*HiliteMenuItem_) (HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite);
  int WINAPI (*GetMenuStringA_) (HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags);
  int WINAPI (*GetMenuStringW_) (HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags);
  UINT WINAPI (*GetMenuState_) (HMENU hMenu, UINT uId, UINT uFlags);
  WINBOOL WINAPI (*DrawMenuBar_) (HWND hWnd);
  HMENU WINAPI (*GetSystemMenu_) (HWND hWnd, WINBOOL bRevert);
  HMENU WINAPI (*CreateMenu_) (VOID);
  HMENU WINAPI (*CreatePopupMenu_) (VOID);
  WINBOOL WINAPI (*DestroyMenu_) (HMENU hMenu);
  DWORD WINAPI (*CheckMenuItem_) (HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
  WINBOOL WINAPI (*EnableMenuItem_) (HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
  HMENU WINAPI (*GetSubMenu_) (HMENU hMenu, int nPos);
  UINT WINAPI (*GetMenuItemID_) (HMENU hMenu, int nPos);
  int WINAPI (*GetMenuItemCount_) (HMENU hMenu);
  WINBOOL WINAPI (*InsertMenuA_) (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
  WINBOOL WINAPI (*InsertMenuW_) (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
  WINBOOL WINAPI (*AppendMenuA_) (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
  WINBOOL WINAPI (*AppendMenuW_) (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
  WINBOOL WINAPI (*ModifyMenuA_) (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
  WINBOOL WINAPI (*ModifyMenuW_) (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
  WINBOOL WINAPI (*RemoveMenu_) (HMENU hMenu, UINT uPosition, UINT uFlags);
  WINBOOL WINAPI (*DeleteMenu_) (HMENU hMenu, UINT uPosition, UINT uFlags);
  WINBOOL WINAPI (*SetMenuItemBitmaps_) (HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);
  LONG WINAPI (*GetMenuCheckMarkDimensions_) (VOID);
  WINBOOL WINAPI (*TrackPopupMenu_) (HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, CONST RECT * prcRect);
  WINBOOL WINAPI (*TrackPopupMenuEx_) (HMENU, UINT, int, int, HWND, LPTPMPARAMS);
  WINBOOL WINAPI (*GetMenuInfo_) (HMENU, LPMENUINFO);
  WINBOOL WINAPI (*SetMenuInfo_) (HMENU, LPCMENUINFO);
  WINBOOL WINAPI (*EndMenu_) (VOID);
  WINBOOL WINAPI (*CalculatePopupWindowPosition_) (const POINT * anchorPoint, const SIZE * windowSize, UINT flags, RECT * excludeRect, RECT * popupWindowPosition);
  WINBOOL WINAPI (*InsertMenuItemA_) (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOA lpmi);
  WINBOOL WINAPI (*InsertMenuItemW_) (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOW lpmi);
  WINBOOL WINAPI (*GetMenuItemInfoA_) (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOA lpmii);
  WINBOOL WINAPI (*GetMenuItemInfoW_) (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOW lpmii);
  WINBOOL WINAPI (*SetMenuItemInfoA_) (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOA lpmii);
  WINBOOL WINAPI (*SetMenuItemInfoW_) (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOW lpmii);
  UINT WINAPI (*GetMenuDefaultItem_) (HMENU hMenu, UINT fByPos, UINT gmdiFlags);
  WINBOOL WINAPI (*SetMenuDefaultItem_) (HMENU hMenu, UINT uItem, UINT fByPos);
  WINBOOL WINAPI (*GetMenuItemRect_) (HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
  int WINAPI (*MenuItemFromPoint_) (HWND hWnd, HMENU hMenu, POINT ptScreen);
  DWORD WINAPI (*DragObject_) (HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur);
  WINBOOL WINAPI (*DragDetect_) (HWND hwnd, POINT pt);
  WINBOOL WINAPI (*DrawIcon_) (HDC hDC, int X, int Y, HICON hIcon);
  int WINAPI (*DrawTextA_) (HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format);
  int WINAPI (*DrawTextW_) (HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format);
  int WINAPI (*DrawTextExA_) (HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
  int WINAPI (*DrawTextExW_) (HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
  WINBOOL WINAPI (*GrayStringA_) (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
  WINBOOL WINAPI (*GrayStringW_) (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
  WINBOOL WINAPI (*DrawStateA_) (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
  WINBOOL WINAPI (*DrawStateW_) (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
  LONG WINAPI (*TabbedTextOutA_) (HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions, int nTabOrigin);
  LONG WINAPI (*TabbedTextOutW_) (HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions, int nTabOrigin);
  DWORD WINAPI (*GetTabbedTextExtentA_) (HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions);
  DWORD WINAPI (*GetTabbedTextExtentW_) (HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, CONST INT * lpnTabStopPositions);
  WINBOOL WINAPI (*UpdateWindow_) (HWND hWnd);
  HWND WINAPI (*SetActiveWindow_) (HWND hWnd);
  HWND WINAPI (*GetForegroundWindow_) (VOID);
  WINBOOL WINAPI (*PaintDesktop_) (HDC hdc);
  VOID WINAPI (*SwitchToThisWindow_) (HWND hwnd, WINBOOL fUnknown);
  WINBOOL WINAPI (*SetForegroundWindow_) (HWND hWnd);
  WINBOOL WINAPI (*AllowSetForegroundWindow_) (DWORD dwProcessId);
  WINBOOL WINAPI (*LockSetForegroundWindow_) (UINT uLockCode);
  HWND WINAPI (*WindowFromDC_) (HDC hDC);
  HDC WINAPI (*GetDC_) (HWND hWnd);
  HDC WINAPI (*GetDCEx_) (HWND hWnd, HRGN hrgnClip, DWORD flags);
  HDC WINAPI (*GetWindowDC_) (HWND hWnd);
  int WINAPI (*ReleaseDC_) (HWND hWnd, HDC hDC);
  HDC WINAPI (*BeginPaint_) (HWND hWnd, LPPAINTSTRUCT lpPaint);
  WINBOOL WINAPI (*EndPaint_) (HWND hWnd, CONST PAINTSTRUCT * lpPaint);
  WINBOOL WINAPI (*GetUpdateRect_) (HWND hWnd, LPRECT lpRect, WINBOOL bErase);
  int WINAPI (*GetUpdateRgn_) (HWND hWnd, HRGN hRgn, WINBOOL bErase);
  int WINAPI (*SetWindowRgn_) (HWND hWnd, HRGN hRgn, WINBOOL bRedraw);
  int WINAPI (*GetWindowRgn_) (HWND hWnd, HRGN hRgn);
  int WINAPI (*GetWindowRgnBox_) (HWND hWnd, LPRECT lprc);
  int WINAPI (*ExcludeUpdateRgn_) (HDC hDC, HWND hWnd);
  WINBOOL WINAPI (*InvalidateRect_) (HWND hWnd, CONST RECT * lpRect, WINBOOL bErase);
  WINBOOL WINAPI (*ValidateRect_) (HWND hWnd, CONST RECT * lpRect);
  WINBOOL WINAPI (*InvalidateRgn_) (HWND hWnd, HRGN hRgn, WINBOOL bErase);
  WINBOOL WINAPI (*ValidateRgn_) (HWND hWnd, HRGN hRgn);
  WINBOOL WINAPI (*RedrawWindow_) (HWND hWnd, CONST RECT * lprcUpdate, HRGN hrgnUpdate, UINT flags);
  WINBOOL WINAPI (*LockWindowUpdate_) (HWND hWndLock);
  WINBOOL WINAPI (*ScrollWindow_) (HWND hWnd, int XAmount, int YAmount, CONST RECT * lpRect, CONST RECT * lpClipRect);
  WINBOOL WINAPI (*ScrollDC_) (HDC hDC, int dx, int dy, CONST RECT * lprcScroll, CONST RECT * lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);
  int WINAPI (*ScrollWindowEx_) (HWND hWnd, int dx, int dy, CONST RECT * prcScroll, CONST RECT * prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);
  int WINAPI (*SetScrollPos_) (HWND hWnd, int nBar, int nPos, WINBOOL bRedraw);
  int WINAPI (*GetScrollPos_) (HWND hWnd, int nBar);
  WINBOOL WINAPI (*SetScrollRange_) (HWND hWnd, int nBar, int nMinPos, int nMaxPos, WINBOOL bRedraw);
  WINBOOL WINAPI (*GetScrollRange_) (HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos);
  WINBOOL WINAPI (*ShowScrollBar_) (HWND hWnd, int wBar, WINBOOL bShow);
  WINBOOL WINAPI (*EnableScrollBar_) (HWND hWnd, UINT wSBflags, UINT wArrows);
  WINBOOL WINAPI (*SetPropA_) (HWND hWnd, LPCSTR lpString, HANDLE hData);
  WINBOOL WINAPI (*SetPropW_) (HWND hWnd, LPCWSTR lpString, HANDLE hData);
  HANDLE WINAPI (*GetPropA_) (HWND hWnd, LPCSTR lpString);
  HANDLE WINAPI (*GetPropW_) (HWND hWnd, LPCWSTR lpString);
  HANDLE WINAPI (*RemovePropA_) (HWND hWnd, LPCSTR lpString);
  HANDLE WINAPI (*RemovePropW_) (HWND hWnd, LPCWSTR lpString);
  int WINAPI (*EnumPropsExA_) (HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam);
  int WINAPI (*EnumPropsExW_) (HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam);
  int WINAPI (*EnumPropsA_) (HWND hWnd, PROPENUMPROCA lpEnumFunc);
  int WINAPI (*EnumPropsW_) (HWND hWnd, PROPENUMPROCW lpEnumFunc);
  WINBOOL WINAPI (*SetWindowTextA_) (HWND hWnd, LPCSTR lpString);
  WINBOOL WINAPI (*SetWindowTextW_) (HWND hWnd, LPCWSTR lpString);
  int WINAPI (*GetWindowTextA_) (HWND hWnd, LPSTR lpString, int nMaxCount);
  int WINAPI (*GetWindowTextW_) (HWND hWnd, LPWSTR lpString, int nMaxCount);
  int WINAPI (*GetWindowTextLengthA_) (HWND hWnd);
  int WINAPI (*GetWindowTextLengthW_) (HWND hWnd);
  WINBOOL WINAPI (*GetClientRect_) (HWND hWnd, LPRECT lpRect);
  WINBOOL WINAPI (*GetWindowRect_) (HWND hWnd, LPRECT lpRect);
  WINBOOL WINAPI (*AdjustWindowRect_) (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu);
  WINBOOL WINAPI (*AdjustWindowRectEx_) (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu, DWORD dwExStyle);
  WINBOOL WINAPI (*SetWindowContextHelpId_) (HWND, DWORD);
  DWORD WINAPI (*GetWindowContextHelpId_) (HWND);
  WINBOOL WINAPI (*SetMenuContextHelpId_) (HMENU, DWORD);
  DWORD WINAPI (*GetMenuContextHelpId_) (HMENU);
  int WINAPI (*MessageBoxA_) (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
  int WINAPI (*MessageBoxW_) (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
  int WINAPI (*MessageBoxExA_) (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId);
  int WINAPI (*MessageBoxExW_) (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);
  int WINAPI (*MessageBoxIndirectA_) (CONST MSGBOXPARAMSA * lpmbp);
  int WINAPI (*MessageBoxIndirectW_) (CONST MSGBOXPARAMSW * lpmbp);
  WINBOOL WINAPI (*MessageBeep_) (UINT uType);
  int WINAPI (*ShowCursor_) (WINBOOL bShow);
  WINBOOL WINAPI (*SetCursorPos_) (int X, int Y);
  HCURSOR WINAPI (*SetCursor_) (HCURSOR hCursor);
  WINBOOL WINAPI (*GetCursorPos_) (LPPOINT lpPoint);
  WINBOOL WINAPI (*ClipCursor_) (CONST RECT * lpRect);
  WINBOOL WINAPI (*GetClipCursor_) (LPRECT lpRect);
  HCURSOR WINAPI (*GetCursor_) (VOID);
  WINBOOL WINAPI (*CreateCaret_) (HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight);
  UINT WINAPI (*GetCaretBlinkTime_) (VOID);
  WINBOOL WINAPI (*SetCaretBlinkTime_) (UINT uMSeconds);
  WINBOOL WINAPI (*DestroyCaret_) (VOID);
  WINBOOL WINAPI (*HideCaret_) (HWND hWnd);
  WINBOOL WINAPI (*ShowCaret_) (HWND hWnd);
  WINBOOL WINAPI (*SetCaretPos_) (int X, int Y);
  WINBOOL WINAPI (*GetCaretPos_) (LPPOINT lpPoint);
  WINBOOL WINAPI (*ClientToScreen_) (HWND hWnd, LPPOINT lpPoint);
  WINBOOL WINAPI (*ScreenToClient_) (HWND hWnd, LPPOINT lpPoint);
  int WINAPI (*MapWindowPoints_) (HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
  HWND WINAPI (*WindowFromPoint_) (POINT Point);
  HWND WINAPI (*ChildWindowFromPoint_) (HWND hWndParent, POINT Point);
  HWND WINAPI (*ChildWindowFromPointEx_) (HWND hwnd, POINT pt, UINT flags);
  WINBOOL WINAPI (*SetPhysicalCursorPos_) (int X, int Y);
  WINBOOL WINAPI (*GetPhysicalCursorPos_) (LPPOINT lpPoint);
  WINBOOL WINAPI (*LogicalToPhysicalPoint_) (HWND hWnd, LPPOINT lpPoint);
  WINBOOL WINAPI (*PhysicalToLogicalPoint_) (HWND hWnd, LPPOINT lpPoint);
  HWND WINAPI (*WindowFromPhysicalPoint_) (POINT Point);
  DWORD WINAPI (*GetSysColor_) (int nIndex);
  HBRUSH WINAPI (*GetSysColorBrush_) (int nIndex);
  WINBOOL WINAPI (*SetSysColors_) (int cElements, CONST INT * lpaElements, CONST COLORREF * lpaRgbValues);
  WINBOOL WINAPI (*DrawFocusRect_) (HDC hDC, CONST RECT * lprc);
  int WINAPI (*FillRect_) (HDC hDC, CONST RECT * lprc, HBRUSH hbr);
  int WINAPI (*FrameRect_) (HDC hDC, CONST RECT * lprc, HBRUSH hbr);
  WINBOOL WINAPI (*InvertRect_) (HDC hDC, CONST RECT * lprc);
  WINBOOL WINAPI (*SetRect_) (LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
  WINBOOL WINAPI (*SetRectEmpty_) (LPRECT lprc);
  WINBOOL WINAPI (*CopyRect_) (LPRECT lprcDst, CONST RECT * lprcSrc);
  WINBOOL WINAPI (*InflateRect_) (LPRECT lprc, int dx, int dy);
  WINBOOL WINAPI (*IntersectRect_) (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2);
  WINBOOL WINAPI (*UnionRect_) (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2);
  WINBOOL WINAPI (*SubtractRect_) (LPRECT lprcDst, CONST RECT * lprcSrc1, CONST RECT * lprcSrc2);
  WINBOOL WINAPI (*OffsetRect_) (LPRECT lprc, int dx, int dy);
  WINBOOL WINAPI (*IsRectEmpty_) (CONST RECT * lprc);
  WINBOOL WINAPI (*EqualRect_) (CONST RECT * lprc1, CONST RECT * lprc2);
  WINBOOL WINAPI (*PtInRect_) (CONST RECT * lprc, POINT pt);
  WORD WINAPI (*GetWindowWord_) (HWND hWnd, int nIndex);
  WORD WINAPI (*SetWindowWord_) (HWND hWnd, int nIndex, WORD wNewWord);
  LONG WINAPI (*GetWindowLongA_) (HWND hWnd, int nIndex);
  LONG WINAPI (*GetWindowLongW_) (HWND hWnd, int nIndex);
  LONG WINAPI (*SetWindowLongA_) (HWND hWnd, int nIndex, LONG dwNewLong);
  LONG WINAPI (*SetWindowLongW_) (HWND hWnd, int nIndex, LONG dwNewLong);
  LONG_PTR WINAPI (*GetWindowLongPtrA_) (HWND hWnd, int nIndex);
  LONG_PTR WINAPI (*GetWindowLongPtrW_) (HWND hWnd, int nIndex);
  LONG_PTR WINAPI (*SetWindowLongPtrA_) (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  LONG_PTR WINAPI (*SetWindowLongPtrW_) (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  WORD WINAPI (*GetClassWord_) (HWND hWnd, int nIndex);
  WORD WINAPI (*SetClassWord_) (HWND hWnd, int nIndex, WORD wNewWord);
  DWORD WINAPI (*GetClassLongA_) (HWND hWnd, int nIndex);
  DWORD WINAPI (*GetClassLongW_) (HWND hWnd, int nIndex);
  DWORD WINAPI (*SetClassLongA_) (HWND hWnd, int nIndex, LONG dwNewLong);
  DWORD WINAPI (*SetClassLongW_) (HWND hWnd, int nIndex, LONG dwNewLong);
  ULONG_PTR WINAPI (*GetClassLongPtrA_) (HWND hWnd, int nIndex);
  ULONG_PTR WINAPI (*GetClassLongPtrW_) (HWND hWnd, int nIndex);
  ULONG_PTR WINAPI (*SetClassLongPtrA_) (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  ULONG_PTR WINAPI (*SetClassLongPtrW_) (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
  WINBOOL WINAPI (*GetProcessDefaultLayout_) (DWORD * pdwDefaultLayout);
  WINBOOL WINAPI (*SetProcessDefaultLayout_) (DWORD dwDefaultLayout);
  HWND WINAPI (*GetDesktopWindow_) (VOID);
  HWND WINAPI (*GetParent_) (HWND hWnd);
  HWND WINAPI (*SetParent_) (HWND hWndChild, HWND hWndNewParent);
  WINBOOL WINAPI (*EnumChildWindows_) (HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
  HWND WINAPI (*FindWindowA_) (LPCSTR lpClassName, LPCSTR lpWindowName);
  HWND WINAPI (*FindWindowW_) (LPCWSTR lpClassName, LPCWSTR lpWindowName);
  HWND WINAPI (*FindWindowExA_) (HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);
  HWND WINAPI (*FindWindowExW_) (HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);
  HWND WINAPI (*GetShellWindow_) (VOID);
  WINBOOL WINAPI (*RegisterShellHookWindow_) (HWND hwnd);
  WINBOOL WINAPI (*DeregisterShellHookWindow_) (HWND hwnd);
  WINBOOL WINAPI (*EnumWindows_) (WNDENUMPROC lpEnumFunc, LPARAM lParam);
  WINBOOL WINAPI (*EnumThreadWindows_) (DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);
  int WINAPI (*GetClassNameA_) (HWND hWnd, LPSTR lpClassName, int nMaxCount);
  int WINAPI (*GetClassNameW_) (HWND hWnd, LPWSTR lpClassName, int nMaxCount);
  HWND WINAPI (*GetTopWindow_) (HWND hWnd);
  DWORD WINAPI (*GetWindowThreadProcessId_) (HWND hWnd, LPDWORD lpdwProcessId);
  WINBOOL WINAPI (*IsGUIThread_) (WINBOOL bConvert);
  HWND WINAPI (*GetLastActivePopup_) (HWND hWnd);
  HWND WINAPI (*GetWindow_) (HWND hWnd, UINT uCmd);
#ifdef STRICT
  HHOOK WINAPI (*SetWindowsHookA_) (int nFilterType, HOOKPROC pfnFilterProc);
  HHOOK WINAPI (*SetWindowsHookW_) (int nFilterType, HOOKPROC pfnFilterProc);
#else
  HOOKPROC WINAPI (*SetWindowsHookA_) (int nFilterType, HOOKPROC pfnFilterProc);
  HOOKPROC WINAPI (*SetWindowsHookW_) (int nFilterType, HOOKPROC pfnFilterProc);
#endif
  WINBOOL WINAPI (*UnhookWindowsHook_) (int nCode, HOOKPROC pfnFilterProc);
  HHOOK WINAPI (*SetWindowsHookExA_) (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
  HHOOK WINAPI (*SetWindowsHookExW_) (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
  WINBOOL WINAPI (*UnhookWindowsHookEx_) (HHOOK hhk);
  LRESULT WINAPI (*CallNextHookEx_) (HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*CheckMenuRadioItem_) (HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);
  HBITMAP WINAPI (*LoadBitmapA_) (HINSTANCE hInstance, LPCSTR lpBitmapName);
  HBITMAP WINAPI (*LoadBitmapW_) (HINSTANCE hInstance, LPCWSTR lpBitmapName);
  HCURSOR WINAPI (*LoadCursorA_) (HINSTANCE hInstance, LPCSTR lpCursorName);
  HCURSOR WINAPI (*LoadCursorW_) (HINSTANCE hInstance, LPCWSTR lpCursorName);
  HCURSOR WINAPI (*LoadCursorFromFileA_) (LPCSTR lpFileName);
  HCURSOR WINAPI (*LoadCursorFromFileW_) (LPCWSTR lpFileName);
  HCURSOR WINAPI (*CreateCursor_) (HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, CONST VOID * pvANDPlane, CONST VOID * pvXORPlane);
  WINBOOL WINAPI (*DestroyCursor_) (HCURSOR hCursor);
  WINBOOL WINAPI (*SetSystemCursor_) (HCURSOR hcur, DWORD id);
  HICON WINAPI (*LoadIconA_) (HINSTANCE hInstance, LPCSTR lpIconName);
  HICON WINAPI (*LoadIconW_) (HINSTANCE hInstance, LPCWSTR lpIconName);
  UINT WINAPI (*PrivateExtractIconsA_) (LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags);
  UINT WINAPI (*PrivateExtractIconsW_) (LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags);
  HICON WINAPI (*CreateIcon_) (HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, CONST BYTE * lpbANDbits, CONST BYTE * lpbXORbits);
  WINBOOL WINAPI (*DestroyIcon_) (HICON hIcon);
  int WINAPI (*LookupIconIdFromDirectory_) (PBYTE presbits, WINBOOL fIcon);
  int WINAPI (*LookupIconIdFromDirectoryEx_) (PBYTE presbits, WINBOOL fIcon, int cxDesired, int cyDesired, UINT Flags);
  HICON WINAPI (*CreateIconFromResource_) (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer);
  HICON WINAPI (*CreateIconFromResourceEx_) (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags);
  HANDLE WINAPI (*LoadImageA_) (HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad);
  HANDLE WINAPI (*LoadImageW_) (HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad);
  HANDLE WINAPI (*CopyImage_) (HANDLE h, UINT type, int cx, int cy, UINT flags);
  WINBOOL WINAPI (*DrawIconEx_) (HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
  HICON WINAPI (*CreateIconIndirect_) (PICONINFO piconinfo);
  HICON WINAPI (*CopyIcon_) (HICON hIcon);
  WINBOOL WINAPI (*GetIconInfo_) (HICON hIcon, PICONINFO piconinfo);
  WINBOOL WINAPI (*GetIconInfoExA_) (HICON hicon, PICONINFOEXA piconinfo);
  WINBOOL WINAPI (*GetIconInfoExW_) (HICON hicon, PICONINFOEXW piconinfo);
  int WINAPI (*LoadStringA_) (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
  int WINAPI (*LoadStringW_) (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
  WINBOOL WINAPI (*IsDialogMessageA_) (HWND hDlg, LPMSG lpMsg);
  WINBOOL WINAPI (*IsDialogMessageW_) (HWND hDlg, LPMSG lpMsg);
  WINBOOL WINAPI (*MapDialogRect_) (HWND hDlg, LPRECT lpRect);
  int WINAPI (*DlgDirListA_) (HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
  int WINAPI (*DlgDirListW_) (HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
  WINBOOL WINAPI (*DlgDirSelectExA_) (HWND hwndDlg, LPSTR lpString, int chCount, int idListBox);
  WINBOOL WINAPI (*DlgDirSelectExW_) (HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox);
  int WINAPI (*DlgDirListComboBoxA_) (HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
  int WINAPI (*DlgDirListComboBoxW_) (HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
  WINBOOL WINAPI (*DlgDirSelectComboBoxExA_) (HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox);
  WINBOOL WINAPI (*DlgDirSelectComboBoxExW_) (HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox);
  int WINAPI (*SetScrollInfo_) (HWND hwnd, int nBar, LPCSCROLLINFO lpsi, WINBOOL redraw);
  WINBOOL WINAPI (*GetScrollInfo_) (HWND hwnd, int nBar, LPSCROLLINFO lpsi);
  LRESULT WINAPI (*DefFrameProcA_) (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*DefFrameProcW_) (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*DefMDIChildProcA_) (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*DefMDIChildProcW_) (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  WINBOOL WINAPI (*TranslateMDISysAccel_) (HWND hWndClient, LPMSG lpMsg);
  UINT WINAPI (*ArrangeIconicWindows_) (HWND hWnd);
  HWND WINAPI (*CreateMDIWindowA_) (LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
  HWND WINAPI (*CreateMDIWindowW_) (LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
  WORD WINAPI (*TileWindows_) (HWND hwndParent, UINT wHow, CONST RECT * lpRect, UINT cKids, const HWND * lpKids);
  WORD WINAPI (*CascadeWindows_) (HWND hwndParent, UINT wHow, CONST RECT * lpRect, UINT cKids, const HWND * lpKids);
  WINBOOL WINAPI (*WinHelpA_) (HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
  WINBOOL WINAPI (*WinHelpW_) (HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
  DWORD WINAPI (*GetGuiResources_) (HANDLE hProcess, DWORD uiFlags);
  LONG WINAPI (*ChangeDisplaySettingsA_) (LPDEVMODEA lpDevMode, DWORD dwFlags);
  LONG WINAPI (*ChangeDisplaySettingsW_) (LPDEVMODEW lpDevMode, DWORD dwFlags);
  LONG WINAPI (*ChangeDisplaySettingsExA_) (LPCSTR lpszDeviceName, LPDEVMODEA lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
  LONG WINAPI (*ChangeDisplaySettingsExW_) (LPCWSTR lpszDeviceName, LPDEVMODEW lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
  WINBOOL WINAPI (*EnumDisplaySettingsA_) (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode);
  WINBOOL WINAPI (*EnumDisplaySettingsW_) (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode);
  WINBOOL WINAPI (*EnumDisplaySettingsExA_) (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode, DWORD dwFlags);
  WINBOOL WINAPI (*EnumDisplaySettingsExW_) (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode, DWORD dwFlags);
  WINBOOL WINAPI (*EnumDisplayDevicesA_) (LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags);
  WINBOOL WINAPI (*EnumDisplayDevicesW_) (LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags);
  LONG WINAPI (*GetDisplayConfigBufferSizes_) (UINT32 flags, UINT32 * numPathArrayElements, UINT32 * numModeInfoArrayElements);
  LONG WINAPI (*SetDisplayConfig_) (UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, UINT32 flags);
  LONG WINAPI (*QueryDisplayConfig_) (UINT32 flags, UINT32 * numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 * numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID * currentTopologyId);
  LONG WINAPI (*DisplayConfigGetDeviceInfo_) (DISPLAYCONFIG_DEVICE_INFO_HEADER * requestPacket);
  LONG WINAPI (*DisplayConfigSetDeviceInfo_) (DISPLAYCONFIG_DEVICE_INFO_HEADER * setPacket);
  WINBOOL WINAPI (*SystemParametersInfoA_) (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
  WINBOOL WINAPI (*SystemParametersInfoW_) (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
  VOID WINAPI (*SetDebugErrorLevel_) (DWORD dwLevel);
  VOID WINAPI (*SetLastErrorEx_) (DWORD dwErrCode, DWORD dwType);
  int WINAPI (*InternalGetWindowText_) (HWND hWnd, LPWSTR pString, int cchMaxCount);
  WINBOOL WINAPI (*CancelShutdown_) (VOID);
  HMONITOR WINAPI (*MonitorFromPoint_) (POINT pt, DWORD dwFlags);
  HMONITOR WINAPI (*MonitorFromRect_) (LPCRECT lprc, DWORD dwFlags);
  HMONITOR WINAPI (*MonitorFromWindow_) (HWND hwnd, DWORD dwFlags);
  WINBOOL WINAPI (*EndTask_) (HWND hWnd, WINBOOL fShutDown, WINBOOL fForce);
  WINBOOL WINAPI (*SoundSentry_) (VOID);
  WINBOOL WINAPI (*GetMonitorInfoA_) (HMONITOR hMonitor, LPMONITORINFO lpmi);
  WINBOOL WINAPI (*GetMonitorInfoW_) (HMONITOR hMonitor, LPMONITORINFO lpmi);
  WINBOOL WINAPI (*EnumDisplayMonitors_) (HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
  VOID WINAPI (*NotifyWinEvent_) (DWORD event, HWND hwnd, LONG idObject, LONG idChild);
  HWINEVENTHOOK WINAPI (*SetWinEventHook_) (DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
  WINBOOL WINAPI (*IsWinEventHookInstalled_) (DWORD event);
  WINBOOL WINAPI (*UnhookWinEvent_) (HWINEVENTHOOK hWinEventHook);
  WINBOOL WINAPI (*GetGUIThreadInfo_) (DWORD idThread, PGUITHREADINFO pgui);
  WINBOOL WINAPI (*BlockInput_) (WINBOOL fBlockIt);
  UINT WINAPI (*GetWindowModuleFileNameA_) (HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax);
  UINT WINAPI (*GetWindowModuleFileNameW_) (HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax);
  WINBOOL WINAPI (*SetProcessDPIAware_) (VOID);
  WINBOOL WINAPI (*IsProcessDPIAware_) (VOID);
  WINBOOL WINAPI (*GetCursorInfo_) (PCURSORINFO pci);
  WINBOOL WINAPI (*GetWindowInfo_) (HWND hwnd, PWINDOWINFO pwi);
  WINBOOL WINAPI (*GetTitleBarInfo_) (HWND hwnd, PTITLEBARINFO pti);
  WINBOOL WINAPI (*GetMenuBarInfo_) (HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi);
  WINBOOL WINAPI (*GetScrollBarInfo_) (HWND hwnd, LONG idObject, PSCROLLBARINFO psbi);
  WINBOOL WINAPI (*GetComboBoxInfo_) (HWND hwndCombo, PCOMBOBOXINFO pcbi);
  HWND WINAPI (*GetAncestor_) (HWND hwnd, UINT gaFlags);
  HWND WINAPI (*RealChildWindowFromPoint_) (HWND hwndParent, POINT ptParentClientCoords);
  UINT WINAPI (*RealGetWindowClassA_) (HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax);
  UINT WINAPI (*RealGetWindowClassW_) (HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax);
  WINBOOL WINAPI (*GetAltTabInfoA_) (HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText);
  WINBOOL WINAPI (*GetAltTabInfoW_) (HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText);
  DWORD WINAPI (*GetListBoxInfo_) (HWND hwnd);
  WINBOOL WINAPI (*LockWorkStation_) (VOID);
  WINBOOL WINAPI (*UserHandleGrantAccess_) (HANDLE hUserHandle, HANDLE hJob, WINBOOL bGrant);
  UINT WINAPI (*GetRawInputData_) (HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);
  UINT WINAPI (*GetRawInputDeviceInfoA_) (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
  UINT WINAPI (*GetRawInputDeviceInfoW_) (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
  UINT WINAPI (*GetRawInputBuffer_) (PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);
  WINBOOL WINAPI (*RegisterRawInputDevices_) (PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
  UINT WINAPI (*GetRegisteredRawInputDevices_) (PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
  UINT WINAPI (*GetRawInputDeviceList_) (PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
  LRESULT WINAPI (*DefRawInputProc_) (PRAWINPUT * paRawInput, INT nInput, UINT cbSizeHeader);
  WINBOOL WINAPI (*GetPointerDevices_) (UINT32 * deviceCount, POINTER_DEVICE_INFO * pointerDevices);
  WINBOOL WINAPI (*GetPointerDevice_) (HANDLE device, POINTER_DEVICE_INFO * pointerDevice);
  WINBOOL WINAPI (*GetPointerDeviceProperties_) (HANDLE device, UINT32 * propertyCount, POINTER_DEVICE_PROPERTY * pointerProperties);
  WINBOOL WINAPI (*RegisterPointerDeviceNotifications_) (HWND window, WINBOOL notifyRange);
  WINBOOL WINAPI (*GetPointerDeviceRects_) (HANDLE device, RECT * pointerDeviceRect, RECT * displayRect);
  WINBOOL WINAPI (*GetPointerDeviceCursors_) (HANDLE device, UINT32 * cursorCount, POINTER_DEVICE_CURSOR_INFO * deviceCursors);
  WINBOOL WINAPI (*GetRawPointerDeviceData_) (UINT32 pointerId, UINT32 historyCount, UINT32 propertiesCount, POINTER_DEVICE_PROPERTY * pProperties, LONG * pValues);
  WINBOOL WINAPI (*ChangeWindowMessageFilter_) (UINT message, DWORD dwFlag);
  WINBOOL WINAPI (*ChangeWindowMessageFilterEx_) (HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);
  WINBOOL WINAPI (*GetGestureInfo_) (HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo);
  WINBOOL WINAPI (*GetGestureExtraArgs_) (HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs);
  WINBOOL WINAPI (*CloseGestureInfoHandle_) (HGESTUREINFO hGestureInfo);
  WINBOOL WINAPI (*SetGestureConfig_) (HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
  WINBOOL WINAPI (*GetGestureConfig_) (HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
  WINBOOL WINAPI (*ShutdownBlockReasonCreate_) (HWND hWnd, LPCWSTR pwszReason);
  WINBOOL WINAPI (*ShutdownBlockReasonQuery_) (HWND hWnd, LPWSTR pwszBuff, DWORD * pcchBuff);
  WINBOOL WINAPI (*ShutdownBlockReasonDestroy_) (HWND hWnd);
  WINBOOL WINAPI (*GetCurrentInputMessageSource_) (INPUT_MESSAGE_SOURCE * inputMessageSource);
  WINBOOL WINAPI (*GetCIMSSM_) (INPUT_MESSAGE_SOURCE * inputMessageSource);
  WINBOOL WINAPI (*GetAutoRotationState_) (PAR_STATE pState);
  WINBOOL WINAPI (*GetDisplayAutoRotationPreferences_) (ORIENTATION_PREFERENCE * pOrientation);
  WINBOOL WINAPI (*GetDisplayAutoRotationPreferencesByProcessId_) (DWORD dwProcessId, ORIENTATION_PREFERENCE * pOrientation, WINBOOL * fRotateScreen);
  WINBOOL WINAPI (*SetDisplayAutoRotationPreferences_) (ORIENTATION_PREFERENCE orientation);
  WINBOOL WINAPI (*IsImmersiveProcess_) (HANDLE hProcess);
  WINBOOL WINAPI (*SetProcessRestrictionExemption_) (WINBOOL fEnableExemption);
  WINBOOL WINAPI (*GetPointerInputTransform_) (UINT32 pointerId, UINT32 historyCount, UINT32 * inputTransform);
  WINBOOL WINAPI (*IsMousePointerEnabled_) (void);

  UINT_PTR WINAPI (*SetSystemTimer_) (HWND hwnd, UINT_PTR id, UINT timeout, void * unknown);
  DWORD WINAPI (*CalcMenuBar_) (HWND hwnd, DWORD left, DWORD right, DWORD top, RECT * rect);
  UINT WINAPI (*WINNLSGetIMEHotkey_) (HWND hwnd);
  HWND WINAPI (*GetTaskmanWindow_) (void);
  BOOL WINAPI (*DdeDisconnect_) (HCONV hConv);
  HSZ WINAPI (*DdeCreateStringHandleA_) (DWORD idInst, LPCSTR psz, INT codepage);
  BOOL WINAPI (*SetProcessDpiAwarenessInternal_) (DPI_AWARENESS awareness);
  BOOL WINAPI (*SetDeskWallpaper_) (const char * filename);
  NTSTATUS WINAPI (*User32ImmTranslateMessage_) (void * args, ULONG size);
  DWORD WINAPI (*DdeGetData_) (HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
  DWORD_PTR WINAPI (*SetSysColorsTemp_) (const COLORREF * pPens, const HBRUSH * pBrushes, DWORD_PTR n);
  LRESULT WINAPI (*StaticWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LPBYTE WINAPI (*DdeAccessData_) (HDDEDATA hData, LPDWORD pcbDataSize);
  BOOL WINAPI (*DdeUnaccessData_) (HDDEDATA hData);
  UINT WINAPI (*DdeInitializeA_) (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
  UINT WINAPI (*DdeInitializeW_) (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
  BOOL WINAPI (*DdeUninitialize_) (DWORD idInst);
  VOID WINAPI (*LoadLocalFonts_) (VOID);
  LPSTR WINAPI (*CharPrevExW_) (WORD codepage, LPCWSTR start, LPCWSTR ptr, DWORD flags);
  HWND WINAPI (*GetProgmanWindow_) (void);
  DPI_AWARENESS_CONTEXT WINAPI (*SetThreadDpiAwarenessContext_) (DPI_AWARENESS_CONTEXT context);
  LPARAM WINAPI (*PackDDElParam_) (UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
  BOOL WINAPI (*DdeFreeDataHandle_) (HDDEDATA hData);
  BOOL WINAPI (*AlignRects_) (LPRECT rect, DWORD b, DWORD c, DWORD d);
  DWORD WINAPI (*DdeQueryStringW_) (DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, INT iCodePage);
  DWORD WINAPI (*SetLogonNotifyWindow_) (HWINSTA hwinsta, HWND hwnd);
  HCURSOR WINAPI (*GetCursorFrameInfo_) (HCURSOR handle, DWORD reserved, DWORD istep, DWORD * rate, DWORD * steps);
  DWORD WINAPI (*DdeQueryStringA_) (DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, INT iCodePage);
  BOOL WINAPI (*DdeSetQualityOfService_) (HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE * pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev);
  UINT WINAPI (*DdeGetLastError_) (DWORD idInst);
  LRESULT WINAPI (*ComboWndProcA_) (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
  BOOL WINAPI (*DdeDisconnectList_) (HCONVLIST hConvList);
  LRESULT WINAPI (*SendIMEMessageExA_) (HWND hwnd, LPARAM lparam);
  INT WINAPI (*DdeCmpStringHandles_) (HSZ hsz1, HSZ hsz2);
  DWORD WINAPI (*RegisterTasklist_) (DWORD x);
  LRESULT WINAPI (*IconTitleWndProc_) (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*SendIMEMessageExW_) (HWND hwnd, LPARAM lparam);
  LRESULT WINAPI (*ComboWndProcW_) (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
  HCONVLIST WINAPI (*DdeConnectList_) (DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC);
  HCONV WINAPI (*DdeQueryNextServer_) (HCONVLIST hConvList, HCONV hConvPrev);
  BOOL WINAPI (*RegisterUserApiHook_) (const struct user_api_hook * new_hook, struct user_api_hook * old_hook);
  void WINAPI (*UnregisterUserApiHook_) (void);
  LRESULT WINAPI (*StaticWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*MDIClientWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  BOOL WINAPI (*DdeKeepStringHandle_) (DWORD idInst, HSZ hsz);
  DWORD WINAPI (*GetAppCompatFlags_) (HTASK hTask);
  HWND WINAPI (*SetProgmanWindow_) (HWND hwnd);
  BOOL WINAPI (*DdeEnableCallback_) (DWORD idInst, HCONV hConv, UINT wCmd);
  DPI_HOSTING_BEHAVIOR WINAPI (*GetThreadDpiHostingBehavior_) (void);
  LRESULT WINAPI (*MDIClientWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*EditWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*ButtonWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  HWND WINAPI (*SetTaskmanWindow_) (HWND hwnd);
  BOOL WINAPI (*DdeImpersonateClient_) (HCONV hConv);
  UINT WINAPI (*DdeQueryConvInfo_) (HCONV hConv, DWORD id, PCONVINFO lpConvInfo);
  void WINAPI (*CalcChildScroll_) (HWND hwnd, INT scroll);
  HCONV WINAPI (*DdeConnect_) (DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC);
  HCONV WINAPI (*DdeReconnect_) (HCONV hConv);
  LPWSTR WINAPI (*CharNextExW_) (WORD codepage, LPCWSTR ptr, DWORD flags);
  LRESULT WINAPI (*EditWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  BOOL WINAPI (*GetProcessDpiAwarenessInternal_) (HANDLE process, DPI_AWARENESS * awareness);
  void WINAPI (*RegisterSystemThread_) (DWORD flags, DWORD reserved);
  BOOL WINAPI (*SetWindowCompositionAttribute_) (HWND hwnd, WINDOWCOMPOSITIONATTRIBDATA const * pwcad);
  HDDEDATA WINAPI (*DdeClientTransaction_) (LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult);
  BOOL WINAPI (*DdeAbandonTransaction_) (DWORD idInst, HCONV hConv, DWORD idTransaction);
  LRESULT WINAPI (*ScrollBarWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  HKL WINAPI (*LoadKeyboardLayoutEx_) (HKL layout, const WCHAR * name, UINT flags);
  int WINAPI (*RegisterServicesProcess_) (DWORD ServicesProcessId);
  HDDEDATA WINAPI (*DdeCreateDataHandle_) (DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
  HDDEDATA WINAPI (*DdeAddData_) (HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
  LRESULT WINAPI (*ScrollBarWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  HDDEDATA WINAPI (*DdeNameService_) (DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);
  LRESULT WINAPI (*ButtonWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  INT WINAPI (*GetSystemMetricsForDpi_) (INT index, UINT dpi);
  DPI_HOSTING_BEHAVIOR WINAPI (*GetWindowDpiHostingBehavior_) (HWND hwnd);
  DWORD WINAPI (*SetWindowStationUser_) (DWORD x1, DWORD x2);
  BOOL WINAPI (*SystemParametersInfoForDpi_) (UINT action, UINT val, PVOID ptr, UINT winini, UINT dpi);
  LRESULT WINAPI (*MessageWndProc_) (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
  BOOL WINAPI (*IsWindowRedirectedForPrint_) (HWND hwnd);
  BOOL WINAPI (*WINNLSGetEnableStatus_) (HWND hwnd);
  BOOL WINAPI (*KillSystemTimer_) (HWND hwnd, UINT_PTR id);
  HSZ WINAPI (*DdeCreateStringHandleW_) (DWORD idInst, LPCWSTR psz, INT codepage);
  INT_PTR WINAPI (*MDI_MoreWindowsDlgProc_) (HWND hDlg, UINT iMsg, WPARAM wParam, LPARAM lParam);
  BOOL WINAPI (*WINNLSEnableIME_) (HWND hwnd, BOOL enable);
  BOOL WINAPI (*AdjustWindowRectExForDpi_) (LPRECT rect, DWORD style, BOOL menu, DWORD dwExStyle, UINT dpi);
  DPI_AWARENESS_CONTEXT WINAPI (*GetThreadDpiAwarenessContext_) (void);
  BOOL WINAPI (*DdeFreeStringHandle_) (DWORD idInst, HSZ hsz);
  BOOL WINAPI (*DrawCaptionTempA_) (HWND hwnd, HDC hdc, const RECT * rect, HFONT hFont, HICON hIcon, LPCSTR str, UINT uFlags);
  WORD WINAPI (*TileChildWindows_) (HWND parent, UINT flags);
  LPARAM WINAPI (*ReuseDDElParam_) (LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);
  BOOL WINAPI (*ImpersonateDdeClientWindow_) (HWND hWndClient, HWND hWndServer);
  UINT WINAPI (*GetDpiForSystem_) (void);
  BOOL WINAPI (*User32InitializeImmEntryTable_) (DWORD magic);
  BOOL WINAPI (*EnableNonClientDpiScaling_) (HWND hwnd);
  BOOL WINAPI (*ImmSetActiveContext_) (HWND, HIMC, BOOL);
  BOOL WINAPI (*IsValidDpiAwarenessContext_) (DPI_AWARENESS_CONTEXT context);
  void WINAPI (*ScrollChildren_) (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  WORD WINAPI (*CascadeChildWindows_) (HWND parent, UINT flags);
  DPI_AWARENESS_CONTEXT WINAPI (*GetWindowDpiAwarenessContext_) (HWND hwnd);
  HDEVNOTIFY WINAPI (*I_ScRegisterDeviceNotification_) (DEVICE_NOTIFICATION_DETAILS * details, LPVOID filter, DWORD flags);
  BOOL WINAPI (*I_ScUnregisterDeviceNotification_) (HDEVNOTIFY handle);
  BOOL WINAPI (*DdeSetUserHandle_) (HCONV hConv, DWORD id, DWORD hUser);
  BOOL WINAPI (*DdePostAdvise_) (DWORD idInst, HSZ hszTopic, HSZ hszItem);
  DWORD WINAPI (*GetAppCompatFlags2_) (HTASK hTask);
  BOOL WINAPI (*AreDpiAwarenessContextsEqual_) (DPI_AWARENESS_CONTEXT ctx1, DPI_AWARENESS_CONTEXT ctx2);
  DPI_AWARENESS WINAPI (*GetAwarenessFromDpiAwarenessContext_) (DPI_AWARENESS_CONTEXT context);
  BOOL WINAPI (*SetShellWindow_) (HWND hwnd);
  LRESULT WINAPI (*ImeWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  UINT WINAPI (*GetDpiForWindow_) (HWND hwnd);
  BOOL WINAPI (*UnpackDDElParam_) (UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
  BOOL WINAPI (*FreeDDElParam_) (UINT msg, LPARAM lParam);
  void WINAPI (*UserRegisterWowHandlers_) (const struct wow_handlers16 * new_, struct wow_handlers32 * orig);
  LRESULT WINAPI (*ImeWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*ListBoxWndProcW_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  LRESULT WINAPI (*ListBoxWndProcA_) (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
  DPI_HOSTING_BEHAVIOR WINAPI (*SetThreadDpiHostingBehavior_) (DPI_HOSTING_BEHAVIOR value);
  DWORD WINAPI (*RegisterLogonProcess_) (HANDLE hprocess, BOOL x);
};//APIUser32

#endif
